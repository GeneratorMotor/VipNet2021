//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RegKor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSКонтрольныеУведомления")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSКонтрольныеУведомления : global::System.Data.DataSet {
        
        private ПолучателиDataTable tableПолучатели;
        
        private ДокументыСИстекшимиСрокамиDataTable tableДокументыСИстекшимиСроками;
        
        private ДокументыС1ДнемDataTable tableДокументыС1Днем;
        
        private ДокументыDataTable tableДокументы;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSКонтрольныеУведомления() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSКонтрольныеУведомления(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Получатели"] != null)) {
                    base.Tables.Add(new ПолучателиDataTable(ds.Tables["Получатели"]));
                }
                if ((ds.Tables["ДокументыСИстекшимиСроками"] != null)) {
                    base.Tables.Add(new ДокументыСИстекшимиСрокамиDataTable(ds.Tables["ДокументыСИстекшимиСроками"]));
                }
                if ((ds.Tables["ДокументыС1Днем"] != null)) {
                    base.Tables.Add(new ДокументыС1ДнемDataTable(ds.Tables["ДокументыС1Днем"]));
                }
                if ((ds.Tables["Документы"] != null)) {
                    base.Tables.Add(new ДокументыDataTable(ds.Tables["Документы"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПолучателиDataTable Получатели {
            get {
                return this.tableПолучатели;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДокументыСИстекшимиСрокамиDataTable ДокументыСИстекшимиСроками {
            get {
                return this.tableДокументыСИстекшимиСроками;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДокументыС1ДнемDataTable ДокументыС1Днем {
            get {
                return this.tableДокументыС1Днем;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДокументыDataTable Документы {
            get {
                return this.tableДокументы;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSКонтрольныеУведомления cln = ((DSКонтрольныеУведомления)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Получатели"] != null)) {
                    base.Tables.Add(new ПолучателиDataTable(ds.Tables["Получатели"]));
                }
                if ((ds.Tables["ДокументыСИстекшимиСроками"] != null)) {
                    base.Tables.Add(new ДокументыСИстекшимиСрокамиDataTable(ds.Tables["ДокументыСИстекшимиСроками"]));
                }
                if ((ds.Tables["ДокументыС1Днем"] != null)) {
                    base.Tables.Add(new ДокументыС1ДнемDataTable(ds.Tables["ДокументыС1Днем"]));
                }
                if ((ds.Tables["Документы"] != null)) {
                    base.Tables.Add(new ДокументыDataTable(ds.Tables["Документы"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableПолучатели = ((ПолучателиDataTable)(base.Tables["Получатели"]));
            if ((initTable == true)) {
                if ((this.tableПолучатели != null)) {
                    this.tableПолучатели.InitVars();
                }
            }
            this.tableДокументыСИстекшимиСроками = ((ДокументыСИстекшимиСрокамиDataTable)(base.Tables["ДокументыСИстекшимиСроками"]));
            if ((initTable == true)) {
                if ((this.tableДокументыСИстекшимиСроками != null)) {
                    this.tableДокументыСИстекшимиСроками.InitVars();
                }
            }
            this.tableДокументыС1Днем = ((ДокументыС1ДнемDataTable)(base.Tables["ДокументыС1Днем"]));
            if ((initTable == true)) {
                if ((this.tableДокументыС1Днем != null)) {
                    this.tableДокументыС1Днем.InitVars();
                }
            }
            this.tableДокументы = ((ДокументыDataTable)(base.Tables["Документы"]));
            if ((initTable == true)) {
                if ((this.tableДокументы != null)) {
                    this.tableДокументы.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSКонтрольныеУведомления";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSКонтрольныеУведомления.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableПолучатели = new ПолучателиDataTable();
            base.Tables.Add(this.tableПолучатели);
            this.tableДокументыСИстекшимиСроками = new ДокументыСИстекшимиСрокамиDataTable();
            base.Tables.Add(this.tableДокументыСИстекшимиСроками);
            this.tableДокументыС1Днем = new ДокументыС1ДнемDataTable();
            base.Tables.Add(this.tableДокументыС1Днем);
            this.tableДокументы = new ДокументыDataTable();
            base.Tables.Add(this.tableДокументы);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeПолучатели() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeДокументыСИстекшимиСроками() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeДокументыС1Днем() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeДокументы() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSКонтрольныеУведомления ds = new DSКонтрольныеУведомления();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ПолучателиRowChangeEventHandler(object sender, ПолучателиRowChangeEvent e);
        
        public delegate void ДокументыСИстекшимиСрокамиRowChangeEventHandler(object sender, ДокументыСИстекшимиСрокамиRowChangeEvent e);
        
        public delegate void ДокументыС1ДнемRowChangeEventHandler(object sender, ДокументыС1ДнемRowChangeEvent e);
        
        public delegate void ДокументыRowChangeEventHandler(object sender, ДокументыRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПолучателиDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_Получателя;
            
            private global::System.Data.DataColumn columnОписаниеПолучателя;
            
            private global::System.Data.DataColumn columnКолвоДокументовНаКонтроле;
            
            private global::System.Data.DataColumn columnКолвоДокументовС1Днем;
            
            private global::System.Data.DataColumn columnКолвоПросроченныхДокументов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиDataTable() {
                this.TableName = "Получатели";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПолучателиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ПолучателиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ПолучателяColumn {
                get {
                    return this.columnid_Получателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеПолучателяColumn {
                get {
                    return this.columnОписаниеПолучателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КолвоДокументовНаКонтролеColumn {
                get {
                    return this.columnКолвоДокументовНаКонтроле;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КолвоДокументовС1ДнемColumn {
                get {
                    return this.columnКолвоДокументовС1Днем;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КолвоПросроченныхДокументовColumn {
                get {
                    return this.columnКолвоПросроченныхДокументов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow this[int index] {
                get {
                    return ((ПолучателиRow)(this.Rows[index]));
                }
            }
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowChanging;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowChanged;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowDeleting;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddПолучателиRow(ПолучателиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow AddПолучателиRow(string ОписаниеПолучателя, int КолвоДокументовНаКонтроле, int КолвоДокументовС1Днем, int КолвоПросроченныхДокументов) {
                ПолучателиRow rowПолучателиRow = ((ПолучателиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ОписаниеПолучателя,
                        КолвоДокументовНаКонтроле,
                        КолвоДокументовС1Днем,
                        КолвоПросроченныхДокументов};
                rowПолучателиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПолучателиRow);
                return rowПолучателиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow FindByid_Получателя(int id_Получателя) {
                return ((ПолучателиRow)(this.Rows.Find(new object[] {
                            id_Получателя})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ПолучателиDataTable cln = ((ПолучателиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПолучателиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_Получателя = base.Columns["id_Получателя"];
                this.columnОписаниеПолучателя = base.Columns["ОписаниеПолучателя"];
                this.columnКолвоДокументовНаКонтроле = base.Columns["КолвоДокументовНаКонтроле"];
                this.columnКолвоДокументовС1Днем = base.Columns["КолвоДокументовС1Днем"];
                this.columnКолвоПросроченныхДокументов = base.Columns["КолвоПросроченныхДокументов"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_Получателя = new global::System.Data.DataColumn("id_Получателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Получателя);
                this.columnОписаниеПолучателя = new global::System.Data.DataColumn("ОписаниеПолучателя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеПолучателя);
                this.columnКолвоДокументовНаКонтроле = new global::System.Data.DataColumn("КолвоДокументовНаКонтроле", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКолвоДокументовНаКонтроле);
                this.columnКолвоДокументовС1Днем = new global::System.Data.DataColumn("КолвоДокументовС1Днем", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКолвоДокументовС1Днем);
                this.columnКолвоПросроченныхДокументов = new global::System.Data.DataColumn("КолвоПросроченныхДокументов", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКолвоПросроченныхДокументов);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ПолучателиKey1", new global::System.Data.DataColumn[] {
                                this.columnid_Получателя}, true));
                this.columnid_Получателя.AutoIncrement = true;
                this.columnid_Получателя.AllowDBNull = false;
                this.columnid_Получателя.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow NewПолучателиRow() {
                return ((ПолучателиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПолучателиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ПолучателиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПолучателиRowChanged != null)) {
                    this.ПолучателиRowChanged(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПолучателиRowChanging != null)) {
                    this.ПолучателиRowChanging(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПолучателиRowDeleted != null)) {
                    this.ПолучателиRowDeleted(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПолучателиRowDeleting != null)) {
                    this.ПолучателиRowDeleting(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveПолучателиRow(ПолучателиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSКонтрольныеУведомления ds = new DSКонтрольныеУведомления();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПолучателиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДокументыСИстекшимиСрокамиDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_Документа;
            
            private global::System.Data.DataColumn columnid_Получателя;
            
            private global::System.Data.DataColumn columnДатаПоступления;
            
            private global::System.Data.DataColumn columnНомерВходящий;
            
            private global::System.Data.DataColumn columnДатаКонтроля;
            
            private global::System.Data.DataColumn columnНомерПП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиDataTable() {
                this.TableName = "ДокументыСИстекшимиСроками";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыСИстекшимиСрокамиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ДокументыСИстекшимиСрокамиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ДокументаColumn {
                get {
                    return this.columnid_Документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ПолучателяColumn {
                get {
                    return this.columnid_Получателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступленияColumn {
                get {
                    return this.columnДатаПоступления;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходящийColumn {
                get {
                    return this.columnНомерВходящий;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаКонтроляColumn {
                get {
                    return this.columnДатаКонтроля;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерППColumn {
                get {
                    return this.columnНомерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRow this[int index] {
                get {
                    return ((ДокументыСИстекшимиСрокамиRow)(this.Rows[index]));
                }
            }
            
            public event ДокументыСИстекшимиСрокамиRowChangeEventHandler ДокументыСИстекшимиСрокамиRowChanging;
            
            public event ДокументыСИстекшимиСрокамиRowChangeEventHandler ДокументыСИстекшимиСрокамиRowChanged;
            
            public event ДокументыСИстекшимиСрокамиRowChangeEventHandler ДокументыСИстекшимиСрокамиRowDeleting;
            
            public event ДокументыСИстекшимиСрокамиRowChangeEventHandler ДокументыСИстекшимиСрокамиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddДокументыСИстекшимиСрокамиRow(ДокументыСИстекшимиСрокамиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRow AddДокументыСИстекшимиСрокамиRow(int id_Получателя, System.DateTime ДатаПоступления, string НомерВходящий, System.DateTime ДатаКонтроля, int НомерПП) {
                ДокументыСИстекшимиСрокамиRow rowДокументыСИстекшимиСрокамиRow = ((ДокументыСИстекшимиСрокамиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        id_Получателя,
                        ДатаПоступления,
                        НомерВходящий,
                        ДатаКонтроля,
                        НомерПП};
                rowДокументыСИстекшимиСрокамиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДокументыСИстекшимиСрокамиRow);
                return rowДокументыСИстекшимиСрокамиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRow FindByid_Документа(int id_Документа) {
                return ((ДокументыСИстекшимиСрокамиRow)(this.Rows.Find(new object[] {
                            id_Документа})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ДокументыСИстекшимиСрокамиDataTable cln = ((ДокументыСИстекшимиСрокамиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДокументыСИстекшимиСрокамиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_Документа = base.Columns["id_Документа"];
                this.columnid_Получателя = base.Columns["id_Получателя"];
                this.columnДатаПоступления = base.Columns["ДатаПоступления"];
                this.columnНомерВходящий = base.Columns["НомерВходящий"];
                this.columnДатаКонтроля = base.Columns["ДатаКонтроля"];
                this.columnНомерПП = base.Columns["НомерПП"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_Документа = new global::System.Data.DataColumn("id_Документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Документа);
                this.columnid_Получателя = new global::System.Data.DataColumn("id_Получателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Получателя);
                this.columnДатаПоступления = new global::System.Data.DataColumn("ДатаПоступления", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступления);
                this.columnНомерВходящий = new global::System.Data.DataColumn("НомерВходящий", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВходящий);
                this.columnДатаКонтроля = new global::System.Data.DataColumn("ДатаКонтроля", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаКонтроля);
                this.columnНомерПП = new global::System.Data.DataColumn("НомерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПП);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ДокументыСИстекшимиСрокамиKey1", new global::System.Data.DataColumn[] {
                                this.columnid_Документа}, true));
                this.columnid_Документа.AutoIncrement = true;
                this.columnid_Документа.AllowDBNull = false;
                this.columnid_Документа.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRow NewДокументыСИстекшимиСрокамиRow() {
                return ((ДокументыСИстекшимиСрокамиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДокументыСИстекшимиСрокамиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ДокументыСИстекшимиСрокамиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДокументыСИстекшимиСрокамиRowChanged != null)) {
                    this.ДокументыСИстекшимиСрокамиRowChanged(this, new ДокументыСИстекшимиСрокамиRowChangeEvent(((ДокументыСИстекшимиСрокамиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДокументыСИстекшимиСрокамиRowChanging != null)) {
                    this.ДокументыСИстекшимиСрокамиRowChanging(this, new ДокументыСИстекшимиСрокамиRowChangeEvent(((ДокументыСИстекшимиСрокамиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДокументыСИстекшимиСрокамиRowDeleted != null)) {
                    this.ДокументыСИстекшимиСрокамиRowDeleted(this, new ДокументыСИстекшимиСрокамиRowChangeEvent(((ДокументыСИстекшимиСрокамиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДокументыСИстекшимиСрокамиRowDeleting != null)) {
                    this.ДокументыСИстекшимиСрокамиRowDeleting(this, new ДокументыСИстекшимиСрокамиRowChangeEvent(((ДокументыСИстекшимиСрокамиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveДокументыСИстекшимиСрокамиRow(ДокументыСИстекшимиСрокамиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSКонтрольныеУведомления ds = new DSКонтрольныеУведомления();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДокументыСИстекшимиСрокамиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДокументыС1ДнемDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_Документа;
            
            private global::System.Data.DataColumn columnid_Получателя;
            
            private global::System.Data.DataColumn columnДатаПоступления;
            
            private global::System.Data.DataColumn columnНомерВходящий;
            
            private global::System.Data.DataColumn columnНомерПП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемDataTable() {
                this.TableName = "ДокументыС1Днем";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыС1ДнемDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ДокументыС1ДнемDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ДокументаColumn {
                get {
                    return this.columnid_Документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ПолучателяColumn {
                get {
                    return this.columnid_Получателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступленияColumn {
                get {
                    return this.columnДатаПоступления;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходящийColumn {
                get {
                    return this.columnНомерВходящий;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерППColumn {
                get {
                    return this.columnНомерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRow this[int index] {
                get {
                    return ((ДокументыС1ДнемRow)(this.Rows[index]));
                }
            }
            
            public event ДокументыС1ДнемRowChangeEventHandler ДокументыС1ДнемRowChanging;
            
            public event ДокументыС1ДнемRowChangeEventHandler ДокументыС1ДнемRowChanged;
            
            public event ДокументыС1ДнемRowChangeEventHandler ДокументыС1ДнемRowDeleting;
            
            public event ДокументыС1ДнемRowChangeEventHandler ДокументыС1ДнемRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddДокументыС1ДнемRow(ДокументыС1ДнемRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRow AddДокументыС1ДнемRow(int id_Получателя, System.DateTime ДатаПоступления, string НомерВходящий, int НомерПП) {
                ДокументыС1ДнемRow rowДокументыС1ДнемRow = ((ДокументыС1ДнемRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        id_Получателя,
                        ДатаПоступления,
                        НомерВходящий,
                        НомерПП};
                rowДокументыС1ДнемRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДокументыС1ДнемRow);
                return rowДокументыС1ДнемRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRow FindByid_Документа(int id_Документа) {
                return ((ДокументыС1ДнемRow)(this.Rows.Find(new object[] {
                            id_Документа})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ДокументыС1ДнемDataTable cln = ((ДокументыС1ДнемDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДокументыС1ДнемDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_Документа = base.Columns["id_Документа"];
                this.columnid_Получателя = base.Columns["id_Получателя"];
                this.columnДатаПоступления = base.Columns["ДатаПоступления"];
                this.columnНомерВходящий = base.Columns["НомерВходящий"];
                this.columnНомерПП = base.Columns["НомерПП"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_Документа = new global::System.Data.DataColumn("id_Документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Документа);
                this.columnid_Получателя = new global::System.Data.DataColumn("id_Получателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Получателя);
                this.columnДатаПоступления = new global::System.Data.DataColumn("ДатаПоступления", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступления);
                this.columnНомерВходящий = new global::System.Data.DataColumn("НомерВходящий", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВходящий);
                this.columnНомерПП = new global::System.Data.DataColumn("НомерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПП);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ДокументыС1ДнемKey1", new global::System.Data.DataColumn[] {
                                this.columnid_Документа}, true));
                this.columnid_Документа.AutoIncrement = true;
                this.columnid_Документа.AllowDBNull = false;
                this.columnid_Документа.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRow NewДокументыС1ДнемRow() {
                return ((ДокументыС1ДнемRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДокументыС1ДнемRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ДокументыС1ДнемRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДокументыС1ДнемRowChanged != null)) {
                    this.ДокументыС1ДнемRowChanged(this, new ДокументыС1ДнемRowChangeEvent(((ДокументыС1ДнемRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДокументыС1ДнемRowChanging != null)) {
                    this.ДокументыС1ДнемRowChanging(this, new ДокументыС1ДнемRowChangeEvent(((ДокументыС1ДнемRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДокументыС1ДнемRowDeleted != null)) {
                    this.ДокументыС1ДнемRowDeleted(this, new ДокументыС1ДнемRowChangeEvent(((ДокументыС1ДнемRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДокументыС1ДнемRowDeleting != null)) {
                    this.ДокументыС1ДнемRowDeleting(this, new ДокументыС1ДнемRowChangeEvent(((ДокументыС1ДнемRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveДокументыС1ДнемRow(ДокументыС1ДнемRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSКонтрольныеУведомления ds = new DSКонтрольныеУведомления();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДокументыС1ДнемDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДокументыDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_Документа;
            
            private global::System.Data.DataColumn columnid_Получателя;
            
            private global::System.Data.DataColumn columnДатаПоступления;
            
            private global::System.Data.DataColumn columnНомерВходящий;
            
            private global::System.Data.DataColumn columnДатаКонтроля;
            
            private global::System.Data.DataColumn columnНомерПП;
            
            private global::System.Data.DataColumn columnТипДокумента;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыDataTable() {
                this.TableName = "Документы";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ДокументыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ДокументаColumn {
                get {
                    return this.columnid_Документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ПолучателяColumn {
                get {
                    return this.columnid_Получателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступленияColumn {
                get {
                    return this.columnДатаПоступления;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходящийColumn {
                get {
                    return this.columnНомерВходящий;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаКонтроляColumn {
                get {
                    return this.columnДатаКонтроля;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерППColumn {
                get {
                    return this.columnНомерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ТипДокументаColumn {
                get {
                    return this.columnТипДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow this[int index] {
                get {
                    return ((ДокументыRow)(this.Rows[index]));
                }
            }
            
            public event ДокументыRowChangeEventHandler ДокументыRowChanging;
            
            public event ДокументыRowChangeEventHandler ДокументыRowChanged;
            
            public event ДокументыRowChangeEventHandler ДокументыRowDeleting;
            
            public event ДокументыRowChangeEventHandler ДокументыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddДокументыRow(ДокументыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow AddДокументыRow(int id_Получателя, System.DateTime ДатаПоступления, string НомерВходящий, System.DateTime ДатаКонтроля, int НомерПП, int ТипДокумента) {
                ДокументыRow rowДокументыRow = ((ДокументыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        id_Получателя,
                        ДатаПоступления,
                        НомерВходящий,
                        ДатаКонтроля,
                        НомерПП,
                        ТипДокумента};
                rowДокументыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДокументыRow);
                return rowДокументыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow FindByid_Документа(int id_Документа) {
                return ((ДокументыRow)(this.Rows.Find(new object[] {
                            id_Документа})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ДокументыDataTable cln = ((ДокументыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДокументыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_Документа = base.Columns["id_Документа"];
                this.columnid_Получателя = base.Columns["id_Получателя"];
                this.columnДатаПоступления = base.Columns["ДатаПоступления"];
                this.columnНомерВходящий = base.Columns["НомерВходящий"];
                this.columnДатаКонтроля = base.Columns["ДатаКонтроля"];
                this.columnНомерПП = base.Columns["НомерПП"];
                this.columnТипДокумента = base.Columns["ТипДокумента"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_Документа = new global::System.Data.DataColumn("id_Документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Документа);
                this.columnid_Получателя = new global::System.Data.DataColumn("id_Получателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Получателя);
                this.columnДатаПоступления = new global::System.Data.DataColumn("ДатаПоступления", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступления);
                this.columnНомерВходящий = new global::System.Data.DataColumn("НомерВходящий", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВходящий);
                this.columnДатаКонтроля = new global::System.Data.DataColumn("ДатаКонтроля", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаКонтроля);
                this.columnНомерПП = new global::System.Data.DataColumn("НомерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПП);
                this.columnТипДокумента = new global::System.Data.DataColumn("ТипДокумента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТипДокумента);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ДокументыKey1", new global::System.Data.DataColumn[] {
                                this.columnid_Документа}, true));
                this.columnid_Документа.AutoIncrement = true;
                this.columnid_Документа.AllowDBNull = false;
                this.columnid_Документа.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow NewДокументыRow() {
                return ((ДокументыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДокументыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ДокументыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДокументыRowChanged != null)) {
                    this.ДокументыRowChanged(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДокументыRowChanging != null)) {
                    this.ДокументыRowChanging(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДокументыRowDeleted != null)) {
                    this.ДокументыRowDeleted(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДокументыRowDeleting != null)) {
                    this.ДокументыRowDeleting(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveДокументыRow(ДокументыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSКонтрольныеУведомления ds = new DSКонтрольныеУведомления();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДокументыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ПолучателиRow : global::System.Data.DataRow {
            
            private ПолучателиDataTable tableПолучатели;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПолучателиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПолучатели = ((ПолучателиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Получателя {
                get {
                    return ((int)(this[this.tableПолучатели.id_ПолучателяColumn]));
                }
                set {
                    this[this.tableПолучатели.id_ПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеПолучателя {
                get {
                    try {
                        return ((string)(this[this.tableПолучатели.ОписаниеПолучателяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеПолучателя\' in table \'Получатели\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.ОписаниеПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int КолвоДокументовНаКонтроле {
                get {
                    try {
                        return ((int)(this[this.tableПолучатели.КолвоДокументовНаКонтролеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КолвоДокументовНаКонтроле\' in table \'Получатели\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableПолучатели.КолвоДокументовНаКонтролеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int КолвоДокументовС1Днем {
                get {
                    try {
                        return ((int)(this[this.tableПолучатели.КолвоДокументовС1ДнемColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КолвоДокументовС1Днем\' in table \'Получатели\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.КолвоДокументовС1ДнемColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int КолвоПросроченныхДокументов {
                get {
                    try {
                        return ((int)(this[this.tableПолучатели.КолвоПросроченныхДокументовColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КолвоПросроченныхДокументов\' in table \'Получатели\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.КолвоПросроченныхДокументовColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеПолучателяNull() {
                return this.IsNull(this.tableПолучатели.ОписаниеПолучателяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеПолучателяNull() {
                this[this.tableПолучатели.ОписаниеПолучателяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКолвоДокументовНаКонтролеNull() {
                return this.IsNull(this.tableПолучатели.КолвоДокументовНаКонтролеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКолвоДокументовНаКонтролеNull() {
                this[this.tableПолучатели.КолвоДокументовНаКонтролеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКолвоДокументовС1ДнемNull() {
                return this.IsNull(this.tableПолучатели.КолвоДокументовС1ДнемColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКолвоДокументовС1ДнемNull() {
                this[this.tableПолучатели.КолвоДокументовС1ДнемColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКолвоПросроченныхДокументовNull() {
                return this.IsNull(this.tableПолучатели.КолвоПросроченныхДокументовColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКолвоПросроченныхДокументовNull() {
                this[this.tableПолучатели.КолвоПросроченныхДокументовColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ДокументыСИстекшимиСрокамиRow : global::System.Data.DataRow {
            
            private ДокументыСИстекшимиСрокамиDataTable tableДокументыСИстекшимиСроками;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыСИстекшимиСрокамиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДокументыСИстекшимиСроками = ((ДокументыСИстекшимиСрокамиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Документа {
                get {
                    return ((int)(this[this.tableДокументыСИстекшимиСроками.id_ДокументаColumn]));
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.id_ДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Получателя {
                get {
                    try {
                        return ((int)(this[this.tableДокументыСИстекшимиСроками.id_ПолучателяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_Получателя\' in table \'ДокументыСИстекшимиСроками\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.id_ПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступления {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableДокументыСИстекшимиСроками.ДатаПоступленияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступления\' in table \'ДокументыСИстекшимиСроками\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.ДатаПоступленияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВходящий {
                get {
                    try {
                        return ((string)(this[this.tableДокументыСИстекшимиСроками.НомерВходящийColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВходящий\' in table \'ДокументыСИстекшимиСроками\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.НомерВходящийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаКонтроля {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableДокументыСИстекшимиСроками.ДатаКонтроляColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаКонтроля\' in table \'ДокументыСИстекшимиСроками\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.ДатаКонтроляColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int НомерПП {
                get {
                    try {
                        return ((int)(this[this.tableДокументыСИстекшимиСроками.НомерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерПП\' in table \'ДокументыСИстекшимиСроками\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыСИстекшимиСроками.НомерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_ПолучателяNull() {
                return this.IsNull(this.tableДокументыСИстекшимиСроками.id_ПолучателяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_ПолучателяNull() {
                this[this.tableДокументыСИстекшимиСроками.id_ПолучателяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступленияNull() {
                return this.IsNull(this.tableДокументыСИстекшимиСроками.ДатаПоступленияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступленияNull() {
                this[this.tableДокументыСИстекшимиСроками.ДатаПоступленияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходящийNull() {
                return this.IsNull(this.tableДокументыСИстекшимиСроками.НомерВходящийColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходящийNull() {
                this[this.tableДокументыСИстекшимиСроками.НомерВходящийColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаКонтроляNull() {
                return this.IsNull(this.tableДокументыСИстекшимиСроками.ДатаКонтроляColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаКонтроляNull() {
                this[this.tableДокументыСИстекшимиСроками.ДатаКонтроляColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерППNull() {
                return this.IsNull(this.tableДокументыСИстекшимиСроками.НомерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерППNull() {
                this[this.tableДокументыСИстекшимиСроками.НомерППColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ДокументыС1ДнемRow : global::System.Data.DataRow {
            
            private ДокументыС1ДнемDataTable tableДокументыС1Днем;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыС1ДнемRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДокументыС1Днем = ((ДокументыС1ДнемDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Документа {
                get {
                    return ((int)(this[this.tableДокументыС1Днем.id_ДокументаColumn]));
                }
                set {
                    this[this.tableДокументыС1Днем.id_ДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Получателя {
                get {
                    try {
                        return ((int)(this[this.tableДокументыС1Днем.id_ПолучателяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_Получателя\' in table \'ДокументыС1Днем\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыС1Днем.id_ПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступления {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableДокументыС1Днем.ДатаПоступленияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступления\' in table \'ДокументыС1Днем\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыС1Днем.ДатаПоступленияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВходящий {
                get {
                    try {
                        return ((string)(this[this.tableДокументыС1Днем.НомерВходящийColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВходящий\' in table \'ДокументыС1Днем\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыС1Днем.НомерВходящийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int НомерПП {
                get {
                    try {
                        return ((int)(this[this.tableДокументыС1Днем.НомерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерПП\' in table \'ДокументыС1Днем\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументыС1Днем.НомерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_ПолучателяNull() {
                return this.IsNull(this.tableДокументыС1Днем.id_ПолучателяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_ПолучателяNull() {
                this[this.tableДокументыС1Днем.id_ПолучателяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступленияNull() {
                return this.IsNull(this.tableДокументыС1Днем.ДатаПоступленияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступленияNull() {
                this[this.tableДокументыС1Днем.ДатаПоступленияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходящийNull() {
                return this.IsNull(this.tableДокументыС1Днем.НомерВходящийColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходящийNull() {
                this[this.tableДокументыС1Днем.НомерВходящийColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерППNull() {
                return this.IsNull(this.tableДокументыС1Днем.НомерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерППNull() {
                this[this.tableДокументыС1Днем.НомерППColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ДокументыRow : global::System.Data.DataRow {
            
            private ДокументыDataTable tableДокументы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДокументы = ((ДокументыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Документа {
                get {
                    return ((int)(this[this.tableДокументы.id_ДокументаColumn]));
                }
                set {
                    this[this.tableДокументы.id_ДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Получателя {
                get {
                    try {
                        return ((int)(this[this.tableДокументы.id_ПолучателяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_Получателя\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.id_ПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступления {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableДокументы.ДатаПоступленияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступления\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.ДатаПоступленияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВходящий {
                get {
                    try {
                        return ((string)(this[this.tableДокументы.НомерВходящийColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВходящий\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.НомерВходящийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаКонтроля {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableДокументы.ДатаКонтроляColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаКонтроля\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.ДатаКонтроляColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int НомерПП {
                get {
                    try {
                        return ((int)(this[this.tableДокументы.НомерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерПП\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.НомерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ТипДокумента {
                get {
                    try {
                        return ((int)(this[this.tableДокументы.ТипДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ТипДокумента\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.ТипДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_ПолучателяNull() {
                return this.IsNull(this.tableДокументы.id_ПолучателяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_ПолучателяNull() {
                this[this.tableДокументы.id_ПолучателяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступленияNull() {
                return this.IsNull(this.tableДокументы.ДатаПоступленияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступленияNull() {
                this[this.tableДокументы.ДатаПоступленияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходящийNull() {
                return this.IsNull(this.tableДокументы.НомерВходящийColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходящийNull() {
                this[this.tableДокументы.НомерВходящийColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаКонтроляNull() {
                return this.IsNull(this.tableДокументы.ДатаКонтроляColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаКонтроляNull() {
                this[this.tableДокументы.ДатаКонтроляColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерППNull() {
                return this.IsNull(this.tableДокументы.НомерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерППNull() {
                this[this.tableДокументы.НомерППColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsТипДокументаNull() {
                return this.IsNull(this.tableДокументы.ТипДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetТипДокументаNull() {
                this[this.tableДокументы.ТипДокументаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ПолучателиRowChangeEvent : global::System.EventArgs {
            
            private ПолучателиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRowChangeEvent(ПолучателиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ДокументыСИстекшимиСрокамиRowChangeEvent : global::System.EventArgs {
            
            private ДокументыСИстекшимиСрокамиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRowChangeEvent(ДокументыСИстекшимиСрокамиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыСИстекшимиСрокамиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ДокументыС1ДнемRowChangeEvent : global::System.EventArgs {
            
            private ДокументыС1ДнемRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRowChangeEvent(ДокументыС1ДнемRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыС1ДнемRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ДокументыRowChangeEvent : global::System.EventArgs {
            
            private ДокументыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRowChangeEvent(ДокументыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591