//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RegKor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DS1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS1 : global::System.Data.DataSet {
        
        private ДокументыDataTable tableДокументы;
        
        private КарточкаИсходящаяDataTable tableКарточкаИсходящая;
        
        private КорреспондентыDataTable tableКорреспонденты;
        
        private ПодразделенияКомитетаDataTable tableПодразделенияКомитета;
        
        private ПолучателиDataTable tableПолучатели;
        
        private ВыборкаDataTable tableВыборка;
        
        private КарточкаDataTable tableКарточка;
        
        private РезолюцииDataTable tableРезолюции;
        
        private ВыборкаИсходящихДокументовDataTable tableВыборкаИсходящихДокументов;
        
        private ВыборкаКоличествоИсходящихДокументовDataTable tableВыборкаКоличествоИсходящихДокументов;
        
        private Карточка1DataTable tableКарточка1;
        
        private global::System.Data.DataRelation relationFK_КарточкаИсходящая_Корреспонденты;
        
        private global::System.Data.DataRelation relationFK_КарточкаИсходящая_ПодразделенияКомитета;
        
        private global::System.Data.DataRelation relationFK_ПодразделенияКомитета_ПолучателиРуководитель;
        
        private global::System.Data.DataRelation relationFK_Карточка_Документы1;
        
        private global::System.Data.DataRelation relationFK_Карточка_Корреспонденты1;
        
        private global::System.Data.DataRelation relationFK_Резолюции_Карточка;
        
        private global::System.Data.DataRelation relationFK_Резолюции_ПодразделенияКомитета;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Документы"] != null)) {
                    base.Tables.Add(new ДокументыDataTable(ds.Tables["Документы"]));
                }
                if ((ds.Tables["КарточкаИсходящая"] != null)) {
                    base.Tables.Add(new КарточкаИсходящаяDataTable(ds.Tables["КарточкаИсходящая"]));
                }
                if ((ds.Tables["Корреспонденты"] != null)) {
                    base.Tables.Add(new КорреспондентыDataTable(ds.Tables["Корреспонденты"]));
                }
                if ((ds.Tables["ПодразделенияКомитета"] != null)) {
                    base.Tables.Add(new ПодразделенияКомитетаDataTable(ds.Tables["ПодразделенияКомитета"]));
                }
                if ((ds.Tables["Получатели"] != null)) {
                    base.Tables.Add(new ПолучателиDataTable(ds.Tables["Получатели"]));
                }
                if ((ds.Tables["Выборка"] != null)) {
                    base.Tables.Add(new ВыборкаDataTable(ds.Tables["Выборка"]));
                }
                if ((ds.Tables["Карточка"] != null)) {
                    base.Tables.Add(new КарточкаDataTable(ds.Tables["Карточка"]));
                }
                if ((ds.Tables["Резолюции"] != null)) {
                    base.Tables.Add(new РезолюцииDataTable(ds.Tables["Резолюции"]));
                }
                if ((ds.Tables["ВыборкаИсходящихДокументов"] != null)) {
                    base.Tables.Add(new ВыборкаИсходящихДокументовDataTable(ds.Tables["ВыборкаИсходящихДокументов"]));
                }
                if ((ds.Tables["ВыборкаКоличествоИсходящихДокументов"] != null)) {
                    base.Tables.Add(new ВыборкаКоличествоИсходящихДокументовDataTable(ds.Tables["ВыборкаКоличествоИсходящихДокументов"]));
                }
                if ((ds.Tables["Карточка1"] != null)) {
                    base.Tables.Add(new Карточка1DataTable(ds.Tables["Карточка1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДокументыDataTable Документы {
            get {
                return this.tableДокументы;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public КарточкаИсходящаяDataTable КарточкаИсходящая {
            get {
                return this.tableКарточкаИсходящая;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public КорреспондентыDataTable Корреспонденты {
            get {
                return this.tableКорреспонденты;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПодразделенияКомитетаDataTable ПодразделенияКомитета {
            get {
                return this.tableПодразделенияКомитета;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПолучателиDataTable Получатели {
            get {
                return this.tableПолучатели;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ВыборкаDataTable Выборка {
            get {
                return this.tableВыборка;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public КарточкаDataTable Карточка {
            get {
                return this.tableКарточка;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public РезолюцииDataTable Резолюции {
            get {
                return this.tableРезолюции;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ВыборкаИсходящихДокументовDataTable ВыборкаИсходящихДокументов {
            get {
                return this.tableВыборкаИсходящихДокументов;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ВыборкаКоличествоИсходящихДокументовDataTable ВыборкаКоличествоИсходящихДокументов {
            get {
                return this.tableВыборкаКоличествоИсходящихДокументов;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Карточка1DataTable Карточка1 {
            get {
                return this.tableКарточка1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DS1 cln = ((DS1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Документы"] != null)) {
                    base.Tables.Add(new ДокументыDataTable(ds.Tables["Документы"]));
                }
                if ((ds.Tables["КарточкаИсходящая"] != null)) {
                    base.Tables.Add(new КарточкаИсходящаяDataTable(ds.Tables["КарточкаИсходящая"]));
                }
                if ((ds.Tables["Корреспонденты"] != null)) {
                    base.Tables.Add(new КорреспондентыDataTable(ds.Tables["Корреспонденты"]));
                }
                if ((ds.Tables["ПодразделенияКомитета"] != null)) {
                    base.Tables.Add(new ПодразделенияКомитетаDataTable(ds.Tables["ПодразделенияКомитета"]));
                }
                if ((ds.Tables["Получатели"] != null)) {
                    base.Tables.Add(new ПолучателиDataTable(ds.Tables["Получатели"]));
                }
                if ((ds.Tables["Выборка"] != null)) {
                    base.Tables.Add(new ВыборкаDataTable(ds.Tables["Выборка"]));
                }
                if ((ds.Tables["Карточка"] != null)) {
                    base.Tables.Add(new КарточкаDataTable(ds.Tables["Карточка"]));
                }
                if ((ds.Tables["Резолюции"] != null)) {
                    base.Tables.Add(new РезолюцииDataTable(ds.Tables["Резолюции"]));
                }
                if ((ds.Tables["ВыборкаИсходящихДокументов"] != null)) {
                    base.Tables.Add(new ВыборкаИсходящихДокументовDataTable(ds.Tables["ВыборкаИсходящихДокументов"]));
                }
                if ((ds.Tables["ВыборкаКоличествоИсходящихДокументов"] != null)) {
                    base.Tables.Add(new ВыборкаКоличествоИсходящихДокументовDataTable(ds.Tables["ВыборкаКоличествоИсходящихДокументов"]));
                }
                if ((ds.Tables["Карточка1"] != null)) {
                    base.Tables.Add(new Карточка1DataTable(ds.Tables["Карточка1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableДокументы = ((ДокументыDataTable)(base.Tables["Документы"]));
            if ((initTable == true)) {
                if ((this.tableДокументы != null)) {
                    this.tableДокументы.InitVars();
                }
            }
            this.tableКарточкаИсходящая = ((КарточкаИсходящаяDataTable)(base.Tables["КарточкаИсходящая"]));
            if ((initTable == true)) {
                if ((this.tableКарточкаИсходящая != null)) {
                    this.tableКарточкаИсходящая.InitVars();
                }
            }
            this.tableКорреспонденты = ((КорреспондентыDataTable)(base.Tables["Корреспонденты"]));
            if ((initTable == true)) {
                if ((this.tableКорреспонденты != null)) {
                    this.tableКорреспонденты.InitVars();
                }
            }
            this.tableПодразделенияКомитета = ((ПодразделенияКомитетаDataTable)(base.Tables["ПодразделенияКомитета"]));
            if ((initTable == true)) {
                if ((this.tableПодразделенияКомитета != null)) {
                    this.tableПодразделенияКомитета.InitVars();
                }
            }
            this.tableПолучатели = ((ПолучателиDataTable)(base.Tables["Получатели"]));
            if ((initTable == true)) {
                if ((this.tableПолучатели != null)) {
                    this.tableПолучатели.InitVars();
                }
            }
            this.tableВыборка = ((ВыборкаDataTable)(base.Tables["Выборка"]));
            if ((initTable == true)) {
                if ((this.tableВыборка != null)) {
                    this.tableВыборка.InitVars();
                }
            }
            this.tableКарточка = ((КарточкаDataTable)(base.Tables["Карточка"]));
            if ((initTable == true)) {
                if ((this.tableКарточка != null)) {
                    this.tableКарточка.InitVars();
                }
            }
            this.tableРезолюции = ((РезолюцииDataTable)(base.Tables["Резолюции"]));
            if ((initTable == true)) {
                if ((this.tableРезолюции != null)) {
                    this.tableРезолюции.InitVars();
                }
            }
            this.tableВыборкаИсходящихДокументов = ((ВыборкаИсходящихДокументовDataTable)(base.Tables["ВыборкаИсходящихДокументов"]));
            if ((initTable == true)) {
                if ((this.tableВыборкаИсходящихДокументов != null)) {
                    this.tableВыборкаИсходящихДокументов.InitVars();
                }
            }
            this.tableВыборкаКоличествоИсходящихДокументов = ((ВыборкаКоличествоИсходящихДокументовDataTable)(base.Tables["ВыборкаКоличествоИсходящихДокументов"]));
            if ((initTable == true)) {
                if ((this.tableВыборкаКоличествоИсходящихДокументов != null)) {
                    this.tableВыборкаКоличествоИсходящихДокументов.InitVars();
                }
            }
            this.tableКарточка1 = ((Карточка1DataTable)(base.Tables["Карточка1"]));
            if ((initTable == true)) {
                if ((this.tableКарточка1 != null)) {
                    this.tableКарточка1.InitVars();
                }
            }
            this.relationFK_КарточкаИсходящая_Корреспонденты = this.Relations["FK_КарточкаИсходящая_Корреспонденты"];
            this.relationFK_КарточкаИсходящая_ПодразделенияКомитета = this.Relations["FK_КарточкаИсходящая_ПодразделенияКомитета"];
            this.relationFK_ПодразделенияКомитета_ПолучателиРуководитель = this.Relations["FK_ПодразделенияКомитета_ПолучателиРуководитель"];
            this.relationFK_Карточка_Документы1 = this.Relations["FK_Карточка_Документы1"];
            this.relationFK_Карточка_Корреспонденты1 = this.Relations["FK_Карточка_Корреспонденты1"];
            this.relationFK_Резолюции_Карточка = this.Relations["FK_Резолюции_Карточка"];
            this.relationFK_Резолюции_ПодразделенияКомитета = this.Relations["FK_Резолюции_ПодразделенияКомитета"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableДокументы = new ДокументыDataTable();
            base.Tables.Add(this.tableДокументы);
            this.tableКарточкаИсходящая = new КарточкаИсходящаяDataTable();
            base.Tables.Add(this.tableКарточкаИсходящая);
            this.tableКорреспонденты = new КорреспондентыDataTable();
            base.Tables.Add(this.tableКорреспонденты);
            this.tableПодразделенияКомитета = new ПодразделенияКомитетаDataTable();
            base.Tables.Add(this.tableПодразделенияКомитета);
            this.tableПолучатели = new ПолучателиDataTable();
            base.Tables.Add(this.tableПолучатели);
            this.tableВыборка = new ВыборкаDataTable();
            base.Tables.Add(this.tableВыборка);
            this.tableКарточка = new КарточкаDataTable();
            base.Tables.Add(this.tableКарточка);
            this.tableРезолюции = new РезолюцииDataTable();
            base.Tables.Add(this.tableРезолюции);
            this.tableВыборкаИсходящихДокументов = new ВыборкаИсходящихДокументовDataTable();
            base.Tables.Add(this.tableВыборкаИсходящихДокументов);
            this.tableВыборкаКоличествоИсходящихДокументов = new ВыборкаКоличествоИсходящихДокументовDataTable();
            base.Tables.Add(this.tableВыборкаКоличествоИсходящихДокументов);
            this.tableКарточка1 = new Карточка1DataTable();
            base.Tables.Add(this.tableКарточка1);
            this.relationFK_КарточкаИсходящая_Корреспонденты = new global::System.Data.DataRelation("FK_КарточкаИсходящая_Корреспонденты", new global::System.Data.DataColumn[] {
                        this.tableКорреспонденты.id_корреспондентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableКарточкаИсходящая.id_АдресатаColumn}, false);
            this.Relations.Add(this.relationFK_КарточкаИсходящая_Корреспонденты);
            this.relationFK_КарточкаИсходящая_ПодразделенияКомитета = new global::System.Data.DataRelation("FK_КарточкаИсходящая_ПодразделенияКомитета", new global::System.Data.DataColumn[] {
                        this.tableПодразделенияКомитета.id_подразделенияColumn}, new global::System.Data.DataColumn[] {
                        this.tableКарточкаИсходящая.id_ПодразделенияColumn}, false);
            this.Relations.Add(this.relationFK_КарточкаИсходящая_ПодразделенияКомитета);
            this.relationFK_ПодразделенияКомитета_ПолучателиРуководитель = new global::System.Data.DataRelation("FK_ПодразделенияКомитета_ПолучателиРуководитель", new global::System.Data.DataColumn[] {
                        this.tableПолучатели.id_получателяColumn}, new global::System.Data.DataColumn[] {
                        this.tableПодразделенияКомитета.id_РуководителяПодразделенияColumn}, false);
            this.Relations.Add(this.relationFK_ПодразделенияКомитета_ПолучателиРуководитель);
            this.relationFK_Карточка_Документы1 = new global::System.Data.DataRelation("FK_Карточка_Документы1", new global::System.Data.DataColumn[] {
                        this.tableДокументы.id_документаColumn}, new global::System.Data.DataColumn[] {
                        this.tableКарточка.id_документаColumn}, false);
            this.Relations.Add(this.relationFK_Карточка_Документы1);
            this.relationFK_Карточка_Корреспонденты1 = new global::System.Data.DataRelation("FK_Карточка_Корреспонденты1", new global::System.Data.DataColumn[] {
                        this.tableКорреспонденты.id_корреспондентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableКарточка.id_корреспондентаColumn}, false);
            this.Relations.Add(this.relationFK_Карточка_Корреспонденты1);
            this.relationFK_Резолюции_Карточка = new global::System.Data.DataRelation("FK_Резолюции_Карточка", new global::System.Data.DataColumn[] {
                        this.tableКарточка.id_карточкиColumn}, new global::System.Data.DataColumn[] {
                        this.tableРезолюции.idКарточкиColumn}, false);
            this.Relations.Add(this.relationFK_Резолюции_Карточка);
            this.relationFK_Резолюции_ПодразделенияКомитета = new global::System.Data.DataRelation("FK_Резолюции_ПодразделенияКомитета", new global::System.Data.DataColumn[] {
                        this.tableПодразделенияКомитета.id_подразделенияColumn}, new global::System.Data.DataColumn[] {
                        this.tableРезолюции.idПодразделенияColumn}, false);
            this.Relations.Add(this.relationFK_Резолюции_ПодразделенияКомитета);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeДокументы() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeКарточкаИсходящая() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeКорреспонденты() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeПодразделенияКомитета() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeПолучатели() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeВыборка() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeКарточка() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeРезолюции() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeВыборкаИсходящихДокументов() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeВыборкаКоличествоИсходящихДокументов() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeКарточка1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DS1 ds = new DS1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ДокументыRowChangeEventHandler(object sender, ДокументыRowChangeEvent e);
        
        public delegate void КарточкаИсходящаяRowChangeEventHandler(object sender, КарточкаИсходящаяRowChangeEvent e);
        
        public delegate void КорреспондентыRowChangeEventHandler(object sender, КорреспондентыRowChangeEvent e);
        
        public delegate void ПодразделенияКомитетаRowChangeEventHandler(object sender, ПодразделенияКомитетаRowChangeEvent e);
        
        public delegate void ПолучателиRowChangeEventHandler(object sender, ПолучателиRowChangeEvent e);
        
        public delegate void ВыборкаRowChangeEventHandler(object sender, ВыборкаRowChangeEvent e);
        
        public delegate void КарточкаRowChangeEventHandler(object sender, КарточкаRowChangeEvent e);
        
        public delegate void РезолюцииRowChangeEventHandler(object sender, РезолюцииRowChangeEvent e);
        
        public delegate void ВыборкаИсходящихДокументовRowChangeEventHandler(object sender, ВыборкаИсходящихДокументовRowChangeEvent e);
        
        public delegate void ВыборкаКоличествоИсходящихДокументовRowChangeEventHandler(object sender, ВыборкаКоличествоИсходящихДокументовRowChangeEvent e);
        
        public delegate void Карточка1RowChangeEventHandler(object sender, Карточка1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДокументыDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_документа;
            
            private global::System.Data.DataColumn columnОписаниеДокумента;
            
            private global::System.Data.DataColumn columnУдален;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыDataTable() {
                this.TableName = "Документы";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ДокументыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_документаColumn {
                get {
                    return this.columnid_документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеДокументаColumn {
                get {
                    return this.columnОписаниеДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn УдаленColumn {
                get {
                    return this.columnУдален;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow this[int index] {
                get {
                    return ((ДокументыRow)(this.Rows[index]));
                }
            }
            
            public event ДокументыRowChangeEventHandler ДокументыRowChanging;
            
            public event ДокументыRowChangeEventHandler ДокументыRowChanged;
            
            public event ДокументыRowChangeEventHandler ДокументыRowDeleting;
            
            public event ДокументыRowChangeEventHandler ДокументыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddДокументыRow(ДокументыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow AddДокументыRow(string ОписаниеДокумента, bool Удален) {
                ДокументыRow rowДокументыRow = ((ДокументыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ОписаниеДокумента,
                        Удален};
                rowДокументыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДокументыRow);
                return rowДокументыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow FindByid_документа(int id_документа) {
                return ((ДокументыRow)(this.Rows.Find(new object[] {
                            id_документа})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ДокументыDataTable cln = ((ДокументыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДокументыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_документа = base.Columns["id_документа"];
                this.columnОписаниеДокумента = base.Columns["ОписаниеДокумента"];
                this.columnУдален = base.Columns["Удален"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_документа = new global::System.Data.DataColumn("id_документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_документа);
                this.columnОписаниеДокумента = new global::System.Data.DataColumn("ОписаниеДокумента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеДокумента);
                this.columnУдален = new global::System.Data.DataColumn("Удален", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУдален);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_документа}, true));
                this.columnid_документа.AutoIncrement = true;
                this.columnid_документа.AllowDBNull = false;
                this.columnid_документа.ReadOnly = true;
                this.columnid_документа.Unique = true;
                this.columnОписаниеДокумента.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow NewДокументыRow() {
                return ((ДокументыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДокументыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ДокументыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДокументыRowChanged != null)) {
                    this.ДокументыRowChanged(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДокументыRowChanging != null)) {
                    this.ДокументыRowChanging(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДокументыRowDeleted != null)) {
                    this.ДокументыRowDeleted(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДокументыRowDeleting != null)) {
                    this.ДокументыRowDeleting(this, new ДокументыRowChangeEvent(((ДокументыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveДокументыRow(ДокументыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДокументыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class КарточкаИсходящаяDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_карточки;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnНомерКомитета;
            
            private global::System.Data.DataColumn columnid_Подразделения;
            
            private global::System.Data.DataColumn columnНомерНоменклатурный;
            
            private global::System.Data.DataColumn columnНомерПорядковый;
            
            private global::System.Data.DataColumn columnid_Адресата;
            
            private global::System.Data.DataColumn columnСодержание;
            
            private global::System.Data.DataColumn columnid_ВходящегоДокумента;
            
            private global::System.Data.DataColumn columnFlagPersonData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяDataTable() {
                this.TableName = "КарточкаИсходящая";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КарточкаИсходящаяDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected КарточкаИсходящаяDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_карточкиColumn {
                get {
                    return this.columnid_карточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерКомитетаColumn {
                get {
                    return this.columnНомерКомитета;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ПодразделенияColumn {
                get {
                    return this.columnid_Подразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерНоменклатурныйColumn {
                get {
                    return this.columnНомерНоменклатурный;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерПорядковыйColumn {
                get {
                    return this.columnНомерПорядковый;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_АдресатаColumn {
                get {
                    return this.columnid_Адресата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn СодержаниеColumn {
                get {
                    return this.columnСодержание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ВходящегоДокументаColumn {
                get {
                    return this.columnid_ВходящегоДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagPersonDataColumn {
                get {
                    return this.columnFlagPersonData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow this[int index] {
                get {
                    return ((КарточкаИсходящаяRow)(this.Rows[index]));
                }
            }
            
            public event КарточкаИсходящаяRowChangeEventHandler КарточкаИсходящаяRowChanging;
            
            public event КарточкаИсходящаяRowChangeEventHandler КарточкаИсходящаяRowChanged;
            
            public event КарточкаИсходящаяRowChangeEventHandler КарточкаИсходящаяRowDeleting;
            
            public event КарточкаИсходящаяRowChangeEventHandler КарточкаИсходящаяRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddКарточкаИсходящаяRow(КарточкаИсходящаяRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow AddКарточкаИсходящаяRow(System.DateTime Дата, string НомерКомитета, ПодразделенияКомитетаRow parentПодразделенияКомитетаRowByFK_КарточкаИсходящая_ПодразделенияКомитета, string НомерНоменклатурный, int НомерПорядковый, КорреспондентыRow parentКорреспондентыRowByFK_КарточкаИсходящая_Корреспонденты, string Содержание, int id_ВходящегоДокумента, bool FlagPersonData) {
                КарточкаИсходящаяRow rowКарточкаИсходящаяRow = ((КарточкаИсходящаяRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Дата,
                        НомерКомитета,
                        null,
                        НомерНоменклатурный,
                        НомерПорядковый,
                        null,
                        Содержание,
                        id_ВходящегоДокумента,
                        FlagPersonData};
                if ((parentПодразделенияКомитетаRowByFK_КарточкаИсходящая_ПодразделенияКомитета != null)) {
                    columnValuesArray[3] = parentПодразделенияКомитетаRowByFK_КарточкаИсходящая_ПодразделенияКомитета[0];
                }
                if ((parentКорреспондентыRowByFK_КарточкаИсходящая_Корреспонденты != null)) {
                    columnValuesArray[6] = parentКорреспондентыRowByFK_КарточкаИсходящая_Корреспонденты[0];
                }
                rowКарточкаИсходящаяRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowКарточкаИсходящаяRow);
                return rowКарточкаИсходящаяRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                КарточкаИсходящаяDataTable cln = ((КарточкаИсходящаяDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new КарточкаИсходящаяDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_карточки = base.Columns["id_карточки"];
                this.columnДата = base.Columns["Дата"];
                this.columnНомерКомитета = base.Columns["НомерКомитета"];
                this.columnid_Подразделения = base.Columns["id_Подразделения"];
                this.columnНомерНоменклатурный = base.Columns["НомерНоменклатурный"];
                this.columnНомерПорядковый = base.Columns["НомерПорядковый"];
                this.columnid_Адресата = base.Columns["id_Адресата"];
                this.columnСодержание = base.Columns["Содержание"];
                this.columnid_ВходящегоДокумента = base.Columns["id_ВходящегоДокумента"];
                this.columnFlagPersonData = base.Columns["FlagPersonData"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_карточки = new global::System.Data.DataColumn("id_карточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_карточки);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnНомерКомитета = new global::System.Data.DataColumn("НомерКомитета", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерКомитета);
                this.columnid_Подразделения = new global::System.Data.DataColumn("id_Подразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Подразделения);
                this.columnНомерНоменклатурный = new global::System.Data.DataColumn("НомерНоменклатурный", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерНоменклатурный);
                this.columnНомерПорядковый = new global::System.Data.DataColumn("НомерПорядковый", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПорядковый);
                this.columnid_Адресата = new global::System.Data.DataColumn("id_Адресата", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Адресата);
                this.columnСодержание = new global::System.Data.DataColumn("Содержание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСодержание);
                this.columnid_ВходящегоДокумента = new global::System.Data.DataColumn("id_ВходящегоДокумента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_ВходящегоДокумента);
                this.columnFlagPersonData = new global::System.Data.DataColumn("FlagPersonData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagPersonData);
                this.columnid_карточки.AutoIncrement = true;
                this.columnid_карточки.AllowDBNull = false;
                this.columnid_карточки.ReadOnly = true;
                this.columnДата.AllowDBNull = false;
                this.columnНомерКомитета.AllowDBNull = false;
                this.columnНомерКомитета.MaxLength = 5;
                this.columnid_Подразделения.AllowDBNull = false;
                this.columnНомерНоменклатурный.AllowDBNull = false;
                this.columnНомерНоменклатурный.MaxLength = 2;
                this.columnНомерПорядковый.AllowDBNull = false;
                this.columnid_Адресата.AllowDBNull = false;
                this.columnСодержание.AllowDBNull = false;
                this.columnСодержание.MaxLength = 2147483647;
                this.columnFlagPersonData.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow NewКарточкаИсходящаяRow() {
                return ((КарточкаИсходящаяRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new КарточкаИсходящаяRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(КарточкаИсходящаяRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.КарточкаИсходящаяRowChanged != null)) {
                    this.КарточкаИсходящаяRowChanged(this, new КарточкаИсходящаяRowChangeEvent(((КарточкаИсходящаяRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.КарточкаИсходящаяRowChanging != null)) {
                    this.КарточкаИсходящаяRowChanging(this, new КарточкаИсходящаяRowChangeEvent(((КарточкаИсходящаяRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.КарточкаИсходящаяRowDeleted != null)) {
                    this.КарточкаИсходящаяRowDeleted(this, new КарточкаИсходящаяRowChangeEvent(((КарточкаИсходящаяRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.КарточкаИсходящаяRowDeleting != null)) {
                    this.КарточкаИсходящаяRowDeleting(this, new КарточкаИсходящаяRowChangeEvent(((КарточкаИсходящаяRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveКарточкаИсходящаяRow(КарточкаИсходящаяRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "КарточкаИсходящаяDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class КорреспондентыDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_корреспондента;
            
            private global::System.Data.DataColumn columnОписаниеКорреспондента;
            
            private global::System.Data.DataColumn columnУдален;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыDataTable() {
                this.TableName = "Корреспонденты";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КорреспондентыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected КорреспондентыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_корреспондентаColumn {
                get {
                    return this.columnid_корреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеКорреспондентаColumn {
                get {
                    return this.columnОписаниеКорреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn УдаленColumn {
                get {
                    return this.columnУдален;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow this[int index] {
                get {
                    return ((КорреспондентыRow)(this.Rows[index]));
                }
            }
            
            public event КорреспондентыRowChangeEventHandler КорреспондентыRowChanging;
            
            public event КорреспондентыRowChangeEventHandler КорреспондентыRowChanged;
            
            public event КорреспондентыRowChangeEventHandler КорреспондентыRowDeleting;
            
            public event КорреспондентыRowChangeEventHandler КорреспондентыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddКорреспондентыRow(КорреспондентыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow AddКорреспондентыRow(string ОписаниеКорреспондента, bool Удален) {
                КорреспондентыRow rowКорреспондентыRow = ((КорреспондентыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ОписаниеКорреспондента,
                        Удален};
                rowКорреспондентыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowКорреспондентыRow);
                return rowКорреспондентыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow FindByid_корреспондента(int id_корреспондента) {
                return ((КорреспондентыRow)(this.Rows.Find(new object[] {
                            id_корреспондента})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                КорреспондентыDataTable cln = ((КорреспондентыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new КорреспондентыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_корреспондента = base.Columns["id_корреспондента"];
                this.columnОписаниеКорреспондента = base.Columns["ОписаниеКорреспондента"];
                this.columnУдален = base.Columns["Удален"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_корреспондента = new global::System.Data.DataColumn("id_корреспондента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_корреспондента);
                this.columnОписаниеКорреспондента = new global::System.Data.DataColumn("ОписаниеКорреспондента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеКорреспондента);
                this.columnУдален = new global::System.Data.DataColumn("Удален", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУдален);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_корреспондента}, true));
                this.columnid_корреспондента.AutoIncrement = true;
                this.columnid_корреспондента.AllowDBNull = false;
                this.columnid_корреспондента.ReadOnly = true;
                this.columnid_корреспондента.Unique = true;
                this.columnОписаниеКорреспондента.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow NewКорреспондентыRow() {
                return ((КорреспондентыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new КорреспондентыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(КорреспондентыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.КорреспондентыRowChanged != null)) {
                    this.КорреспондентыRowChanged(this, new КорреспондентыRowChangeEvent(((КорреспондентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.КорреспондентыRowChanging != null)) {
                    this.КорреспондентыRowChanging(this, new КорреспондентыRowChangeEvent(((КорреспондентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.КорреспондентыRowDeleted != null)) {
                    this.КорреспондентыRowDeleted(this, new КорреспондентыRowChangeEvent(((КорреспондентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.КорреспондентыRowDeleting != null)) {
                    this.КорреспондентыRowDeleting(this, new КорреспондентыRowChangeEvent(((КорреспондентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveКорреспондентыRow(КорреспондентыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "КорреспондентыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПодразделенияКомитетаDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_подразделения;
            
            private global::System.Data.DataColumn columnОписаниеПодразделения;
            
            private global::System.Data.DataColumn columnid_РуководителяПодразделения;
            
            private global::System.Data.DataColumn columnНомерПодразделения;
            
            private global::System.Data.DataColumn columnБуквенноеОбозначение;
            
            private global::System.Data.DataColumn columnУдален;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаDataTable() {
                this.TableName = "ПодразделенияКомитета";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПодразделенияКомитетаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ПодразделенияКомитетаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_подразделенияColumn {
                get {
                    return this.columnid_подразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеПодразделенияColumn {
                get {
                    return this.columnОписаниеПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_РуководителяПодразделенияColumn {
                get {
                    return this.columnid_РуководителяПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерПодразделенияColumn {
                get {
                    return this.columnНомерПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn БуквенноеОбозначениеColumn {
                get {
                    return this.columnБуквенноеОбозначение;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn УдаленColumn {
                get {
                    return this.columnУдален;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow this[int index] {
                get {
                    return ((ПодразделенияКомитетаRow)(this.Rows[index]));
                }
            }
            
            public event ПодразделенияКомитетаRowChangeEventHandler ПодразделенияКомитетаRowChanging;
            
            public event ПодразделенияКомитетаRowChangeEventHandler ПодразделенияКомитетаRowChanged;
            
            public event ПодразделенияКомитетаRowChangeEventHandler ПодразделенияКомитетаRowDeleting;
            
            public event ПодразделенияКомитетаRowChangeEventHandler ПодразделенияКомитетаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddПодразделенияКомитетаRow(ПодразделенияКомитетаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow AddПодразделенияКомитетаRow(string ОписаниеПодразделения, ПолучателиRow parentПолучателиRowByFK_ПодразделенияКомитета_ПолучателиРуководитель, string НомерПодразделения, string БуквенноеОбозначение, bool Удален) {
                ПодразделенияКомитетаRow rowПодразделенияКомитетаRow = ((ПодразделенияКомитетаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ОписаниеПодразделения,
                        null,
                        НомерПодразделения,
                        БуквенноеОбозначение,
                        Удален};
                if ((parentПолучателиRowByFK_ПодразделенияКомитета_ПолучателиРуководитель != null)) {
                    columnValuesArray[2] = parentПолучателиRowByFK_ПодразделенияКомитета_ПолучателиРуководитель[0];
                }
                rowПодразделенияКомитетаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПодразделенияКомитетаRow);
                return rowПодразделенияКомитетаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow FindByid_подразделения(int id_подразделения) {
                return ((ПодразделенияКомитетаRow)(this.Rows.Find(new object[] {
                            id_подразделения})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ПодразделенияКомитетаDataTable cln = ((ПодразделенияКомитетаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПодразделенияКомитетаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_подразделения = base.Columns["id_подразделения"];
                this.columnОписаниеПодразделения = base.Columns["ОписаниеПодразделения"];
                this.columnid_РуководителяПодразделения = base.Columns["id_РуководителяПодразделения"];
                this.columnНомерПодразделения = base.Columns["НомерПодразделения"];
                this.columnБуквенноеОбозначение = base.Columns["БуквенноеОбозначение"];
                this.columnУдален = base.Columns["Удален"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_подразделения = new global::System.Data.DataColumn("id_подразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_подразделения);
                this.columnОписаниеПодразделения = new global::System.Data.DataColumn("ОписаниеПодразделения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеПодразделения);
                this.columnid_РуководителяПодразделения = new global::System.Data.DataColumn("id_РуководителяПодразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_РуководителяПодразделения);
                this.columnНомерПодразделения = new global::System.Data.DataColumn("НомерПодразделения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПодразделения);
                this.columnБуквенноеОбозначение = new global::System.Data.DataColumn("БуквенноеОбозначение", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnБуквенноеОбозначение);
                this.columnУдален = new global::System.Data.DataColumn("Удален", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУдален);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_подразделения}, true));
                this.columnid_подразделения.AutoIncrement = true;
                this.columnid_подразделения.AllowDBNull = false;
                this.columnid_подразделения.ReadOnly = true;
                this.columnid_подразделения.Unique = true;
                this.columnОписаниеПодразделения.AllowDBNull = false;
                this.columnОписаниеПодразделения.MaxLength = 150;
                this.columnid_РуководителяПодразделения.AllowDBNull = false;
                this.columnНомерПодразделения.AllowDBNull = false;
                this.columnНомерПодразделения.MaxLength = 2;
                this.columnБуквенноеОбозначение.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow NewПодразделенияКомитетаRow() {
                return ((ПодразделенияКомитетаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПодразделенияКомитетаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ПодразделенияКомитетаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПодразделенияКомитетаRowChanged != null)) {
                    this.ПодразделенияКомитетаRowChanged(this, new ПодразделенияКомитетаRowChangeEvent(((ПодразделенияКомитетаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПодразделенияКомитетаRowChanging != null)) {
                    this.ПодразделенияКомитетаRowChanging(this, new ПодразделенияКомитетаRowChangeEvent(((ПодразделенияКомитетаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПодразделенияКомитетаRowDeleted != null)) {
                    this.ПодразделенияКомитетаRowDeleted(this, new ПодразделенияКомитетаRowChangeEvent(((ПодразделенияКомитетаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПодразделенияКомитетаRowDeleting != null)) {
                    this.ПодразделенияКомитетаRowDeleting(this, new ПодразделенияКомитетаRowChangeEvent(((ПодразделенияКомитетаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveПодразделенияКомитетаRow(ПодразделенияКомитетаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПодразделенияКомитетаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПолучателиDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_получателя;
            
            private global::System.Data.DataColumn columnОписаниеПолучателя;
            
            private global::System.Data.DataColumn columnИмяРегистрации;
            
            private global::System.Data.DataColumn columnУдален;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиDataTable() {
                this.TableName = "Получатели";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПолучателиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ПолучателиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_получателяColumn {
                get {
                    return this.columnid_получателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеПолучателяColumn {
                get {
                    return this.columnОписаниеПолучателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ИмяРегистрацииColumn {
                get {
                    return this.columnИмяРегистрации;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn УдаленColumn {
                get {
                    return this.columnУдален;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow this[int index] {
                get {
                    return ((ПолучателиRow)(this.Rows[index]));
                }
            }
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowChanging;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowChanged;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowDeleting;
            
            public event ПолучателиRowChangeEventHandler ПолучателиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddПолучателиRow(ПолучателиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow AddПолучателиRow(string ОписаниеПолучателя, int ИмяРегистрации, bool Удален) {
                ПолучателиRow rowПолучателиRow = ((ПолучателиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ОписаниеПолучателя,
                        ИмяРегистрации,
                        Удален};
                rowПолучателиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПолучателиRow);
                return rowПолучателиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow FindByid_получателя(int id_получателя) {
                return ((ПолучателиRow)(this.Rows.Find(new object[] {
                            id_получателя})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ПолучателиDataTable cln = ((ПолучателиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПолучателиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_получателя = base.Columns["id_получателя"];
                this.columnОписаниеПолучателя = base.Columns["ОписаниеПолучателя"];
                this.columnИмяРегистрации = base.Columns["ИмяРегистрации"];
                this.columnУдален = base.Columns["Удален"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_получателя = new global::System.Data.DataColumn("id_получателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_получателя);
                this.columnОписаниеПолучателя = new global::System.Data.DataColumn("ОписаниеПолучателя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеПолучателя);
                this.columnИмяРегистрации = new global::System.Data.DataColumn("ИмяРегистрации", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИмяРегистрации);
                this.columnУдален = new global::System.Data.DataColumn("Удален", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУдален);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_получателя}, true));
                this.columnid_получателя.AutoIncrement = true;
                this.columnid_получателя.AllowDBNull = false;
                this.columnid_получателя.ReadOnly = true;
                this.columnid_получателя.Unique = true;
                this.columnОписаниеПолучателя.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow NewПолучателиRow() {
                return ((ПолучателиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПолучателиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ПолучателиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПолучателиRowChanged != null)) {
                    this.ПолучателиRowChanged(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПолучателиRowChanging != null)) {
                    this.ПолучателиRowChanging(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПолучателиRowDeleted != null)) {
                    this.ПолучателиRowDeleted(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПолучателиRowDeleting != null)) {
                    this.ПолучателиRowDeleting(this, new ПолучателиRowChangeEvent(((ПолучателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveПолучателиRow(ПолучателиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПолучателиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ВыборкаDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_карточки;
            
            private global::System.Data.DataColumn columnОписаниеДокумента;
            
            private global::System.Data.DataColumn columnОписаниеКорреспондента;
            
            private global::System.Data.DataColumn columnДатаИсхода;
            
            private global::System.Data.DataColumn columnНомерИсход;
            
            private global::System.Data.DataColumn columnДатаПоступ;
            
            private global::System.Data.DataColumn columnНомерВход;
            
            private global::System.Data.DataColumn columnКраткоеСодержание;
            
            private global::System.Data.DataColumn columnСрокВыполнения;
            
            private global::System.Data.DataColumn columnРезолюция;
            
            private global::System.Data.DataColumn columnВДело;
            
            private global::System.Data.DataColumn columnНаКонтроле;
            
            private global::System.Data.DataColumn columnРезультатВыполнения;
            
            private global::System.Data.DataColumn columnномерПП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаDataTable() {
                this.TableName = "Выборка";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ВыборкаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_карточкиColumn {
                get {
                    return this.columnid_карточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеДокументаColumn {
                get {
                    return this.columnОписаниеДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеКорреспондентаColumn {
                get {
                    return this.columnОписаниеКорреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаИсходаColumn {
                get {
                    return this.columnДатаИсхода;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерИсходColumn {
                get {
                    return this.columnНомерИсход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступColumn {
                get {
                    return this.columnДатаПоступ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходColumn {
                get {
                    return this.columnНомерВход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КраткоеСодержаниеColumn {
                get {
                    return this.columnКраткоеСодержание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn СрокВыполненияColumn {
                get {
                    return this.columnСрокВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезолюцияColumn {
                get {
                    return this.columnРезолюция;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ВДелоColumn {
                get {
                    return this.columnВДело;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НаКонтролеColumn {
                get {
                    return this.columnНаКонтроле;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезультатВыполненияColumn {
                get {
                    return this.columnРезультатВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn номерППColumn {
                get {
                    return this.columnномерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRow this[int index] {
                get {
                    return ((ВыборкаRow)(this.Rows[index]));
                }
            }
            
            public event ВыборкаRowChangeEventHandler ВыборкаRowChanging;
            
            public event ВыборкаRowChangeEventHandler ВыборкаRowChanged;
            
            public event ВыборкаRowChangeEventHandler ВыборкаRowDeleting;
            
            public event ВыборкаRowChangeEventHandler ВыборкаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddВыборкаRow(ВыборкаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRow AddВыборкаRow(int id_карточки, string ОписаниеДокумента, string ОписаниеКорреспондента, System.DateTime ДатаИсхода, string НомерИсход, System.DateTime ДатаПоступ, string НомерВход, string КраткоеСодержание, System.DateTime СрокВыполнения, string Резолюция, bool ВДело, bool НаКонтроле, string РезультатВыполнения, int номерПП) {
                ВыборкаRow rowВыборкаRow = ((ВыборкаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id_карточки,
                        ОписаниеДокумента,
                        ОписаниеКорреспондента,
                        ДатаИсхода,
                        НомерИсход,
                        ДатаПоступ,
                        НомерВход,
                        КраткоеСодержание,
                        СрокВыполнения,
                        Резолюция,
                        ВДело,
                        НаКонтроле,
                        РезультатВыполнения,
                        номерПП};
                rowВыборкаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowВыборкаRow);
                return rowВыборкаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRow FindByid_карточки(int id_карточки) {
                return ((ВыборкаRow)(this.Rows.Find(new object[] {
                            id_карточки})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ВыборкаDataTable cln = ((ВыборкаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ВыборкаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_карточки = base.Columns["id_карточки"];
                this.columnОписаниеДокумента = base.Columns["ОписаниеДокумента"];
                this.columnОписаниеКорреспондента = base.Columns["ОписаниеКорреспондента"];
                this.columnДатаИсхода = base.Columns["ДатаИсхода"];
                this.columnНомерИсход = base.Columns["НомерИсход"];
                this.columnДатаПоступ = base.Columns["ДатаПоступ"];
                this.columnНомерВход = base.Columns["НомерВход"];
                this.columnКраткоеСодержание = base.Columns["КраткоеСодержание"];
                this.columnСрокВыполнения = base.Columns["СрокВыполнения"];
                this.columnРезолюция = base.Columns["Резолюция"];
                this.columnВДело = base.Columns["ВДело"];
                this.columnНаКонтроле = base.Columns["НаКонтроле"];
                this.columnРезультатВыполнения = base.Columns["РезультатВыполнения"];
                this.columnномерПП = base.Columns["номерПП"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_карточки = new global::System.Data.DataColumn("id_карточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_карточки);
                this.columnОписаниеДокумента = new global::System.Data.DataColumn("ОписаниеДокумента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеДокумента);
                this.columnОписаниеКорреспондента = new global::System.Data.DataColumn("ОписаниеКорреспондента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеКорреспондента);
                this.columnДатаИсхода = new global::System.Data.DataColumn("ДатаИсхода", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаИсхода);
                this.columnНомерИсход = new global::System.Data.DataColumn("НомерИсход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерИсход);
                this.columnДатаПоступ = new global::System.Data.DataColumn("ДатаПоступ", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступ);
                this.columnНомерВход = new global::System.Data.DataColumn("НомерВход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВход);
                this.columnКраткоеСодержание = new global::System.Data.DataColumn("КраткоеСодержание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКраткоеСодержание);
                this.columnСрокВыполнения = new global::System.Data.DataColumn("СрокВыполнения", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСрокВыполнения);
                this.columnРезолюция = new global::System.Data.DataColumn("Резолюция", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезолюция);
                this.columnВДело = new global::System.Data.DataColumn("ВДело", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВДело);
                this.columnНаКонтроле = new global::System.Data.DataColumn("НаКонтроле", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаКонтроле);
                this.columnРезультатВыполнения = new global::System.Data.DataColumn("РезультатВыполнения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезультатВыполнения);
                this.columnномерПП = new global::System.Data.DataColumn("номерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnномерПП);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_карточки}, true));
                this.columnid_карточки.AllowDBNull = false;
                this.columnid_карточки.Unique = true;
                this.columnОписаниеДокумента.MaxLength = 150;
                this.columnОписаниеКорреспондента.AllowDBNull = false;
                this.columnОписаниеКорреспондента.MaxLength = 255;
                this.columnНомерИсход.MaxLength = 50;
                this.columnНомерВход.MaxLength = 50;
                this.columnКраткоеСодержание.MaxLength = 2147483647;
                this.columnРезолюция.MaxLength = 255;
                this.columnВДело.AllowDBNull = false;
                this.columnНаКонтроле.AllowDBNull = false;
                this.columnРезультатВыполнения.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRow NewВыборкаRow() {
                return ((ВыборкаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ВыборкаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ВыборкаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ВыборкаRowChanged != null)) {
                    this.ВыборкаRowChanged(this, new ВыборкаRowChangeEvent(((ВыборкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ВыборкаRowChanging != null)) {
                    this.ВыборкаRowChanging(this, new ВыборкаRowChangeEvent(((ВыборкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ВыборкаRowDeleted != null)) {
                    this.ВыборкаRowDeleted(this, new ВыборкаRowChangeEvent(((ВыборкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ВыборкаRowDeleting != null)) {
                    this.ВыборкаRowDeleting(this, new ВыборкаRowChangeEvent(((ВыборкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveВыборкаRow(ВыборкаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ВыборкаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class КарточкаDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_карточки;
            
            private global::System.Data.DataColumn columnid_документа;
            
            private global::System.Data.DataColumn columnid_корреспондента;
            
            private global::System.Data.DataColumn columnВДело;
            
            private global::System.Data.DataColumn columnДатаИсхода;
            
            private global::System.Data.DataColumn columnДатаПоступ;
            
            private global::System.Data.DataColumn columnКраткоеСодержание;
            
            private global::System.Data.DataColumn columnНаКонтроле;
            
            private global::System.Data.DataColumn columnНомерВход;
            
            private global::System.Data.DataColumn columnНомерИсход;
            
            private global::System.Data.DataColumn columnРезолюция;
            
            private global::System.Data.DataColumn columnРезультатВыполнения;
            
            private global::System.Data.DataColumn columnСрокВыполнения;
            
            private global::System.Data.DataColumn columnномерПП;
            
            private global::System.Data.DataColumn columnFlagPersonData;
            
            private global::System.Data.DataColumn columnFlagCardRepeet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаDataTable() {
                this.TableName = "Карточка";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КарточкаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected КарточкаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_карточкиColumn {
                get {
                    return this.columnid_карточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_документаColumn {
                get {
                    return this.columnid_документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_корреспондентаColumn {
                get {
                    return this.columnid_корреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ВДелоColumn {
                get {
                    return this.columnВДело;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаИсходаColumn {
                get {
                    return this.columnДатаИсхода;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступColumn {
                get {
                    return this.columnДатаПоступ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КраткоеСодержаниеColumn {
                get {
                    return this.columnКраткоеСодержание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НаКонтролеColumn {
                get {
                    return this.columnНаКонтроле;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходColumn {
                get {
                    return this.columnНомерВход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерИсходColumn {
                get {
                    return this.columnНомерИсход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезолюцияColumn {
                get {
                    return this.columnРезолюция;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезультатВыполненияColumn {
                get {
                    return this.columnРезультатВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn СрокВыполненияColumn {
                get {
                    return this.columnСрокВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn номерППColumn {
                get {
                    return this.columnномерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagPersonDataColumn {
                get {
                    return this.columnFlagPersonData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagCardRepeetColumn {
                get {
                    return this.columnFlagCardRepeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow this[int index] {
                get {
                    return ((КарточкаRow)(this.Rows[index]));
                }
            }
            
            public event КарточкаRowChangeEventHandler КарточкаRowChanging;
            
            public event КарточкаRowChangeEventHandler КарточкаRowChanged;
            
            public event КарточкаRowChangeEventHandler КарточкаRowDeleting;
            
            public event КарточкаRowChangeEventHandler КарточкаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddКарточкаRow(КарточкаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow AddКарточкаRow(ДокументыRow parentДокументыRowByFK_Карточка_Документы1, КорреспондентыRow parentКорреспондентыRowByFK_Карточка_Корреспонденты1, bool ВДело, System.DateTime ДатаИсхода, System.DateTime ДатаПоступ, string КраткоеСодержание, bool НаКонтроле, string НомерВход, string НомерИсход, string Резолюция, string РезультатВыполнения, System.DateTime СрокВыполнения, int номерПП, byte FlagPersonData, bool FlagCardRepeet) {
                КарточкаRow rowКарточкаRow = ((КарточкаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ВДело,
                        ДатаИсхода,
                        ДатаПоступ,
                        КраткоеСодержание,
                        НаКонтроле,
                        НомерВход,
                        НомерИсход,
                        Резолюция,
                        РезультатВыполнения,
                        СрокВыполнения,
                        номерПП,
                        FlagPersonData,
                        FlagCardRepeet};
                if ((parentДокументыRowByFK_Карточка_Документы1 != null)) {
                    columnValuesArray[1] = parentДокументыRowByFK_Карточка_Документы1[0];
                }
                if ((parentКорреспондентыRowByFK_Карточка_Корреспонденты1 != null)) {
                    columnValuesArray[2] = parentКорреспондентыRowByFK_Карточка_Корреспонденты1[0];
                }
                rowКарточкаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowКарточкаRow);
                return rowКарточкаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow FindByid_карточки(int id_карточки) {
                return ((КарточкаRow)(this.Rows.Find(new object[] {
                            id_карточки})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                КарточкаDataTable cln = ((КарточкаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new КарточкаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_карточки = base.Columns["id_карточки"];
                this.columnid_документа = base.Columns["id_документа"];
                this.columnid_корреспондента = base.Columns["id_корреспондента"];
                this.columnВДело = base.Columns["ВДело"];
                this.columnДатаИсхода = base.Columns["ДатаИсхода"];
                this.columnДатаПоступ = base.Columns["ДатаПоступ"];
                this.columnКраткоеСодержание = base.Columns["КраткоеСодержание"];
                this.columnНаКонтроле = base.Columns["НаКонтроле"];
                this.columnНомерВход = base.Columns["НомерВход"];
                this.columnНомерИсход = base.Columns["НомерИсход"];
                this.columnРезолюция = base.Columns["Резолюция"];
                this.columnРезультатВыполнения = base.Columns["РезультатВыполнения"];
                this.columnСрокВыполнения = base.Columns["СрокВыполнения"];
                this.columnномерПП = base.Columns["номерПП"];
                this.columnFlagPersonData = base.Columns["FlagPersonData"];
                this.columnFlagCardRepeet = base.Columns["FlagCardRepeet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_карточки = new global::System.Data.DataColumn("id_карточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_карточки);
                this.columnid_документа = new global::System.Data.DataColumn("id_документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_документа);
                this.columnid_корреспондента = new global::System.Data.DataColumn("id_корреспондента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_корреспондента);
                this.columnВДело = new global::System.Data.DataColumn("ВДело", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВДело);
                this.columnДатаИсхода = new global::System.Data.DataColumn("ДатаИсхода", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаИсхода);
                this.columnДатаПоступ = new global::System.Data.DataColumn("ДатаПоступ", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступ);
                this.columnКраткоеСодержание = new global::System.Data.DataColumn("КраткоеСодержание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКраткоеСодержание);
                this.columnНаКонтроле = new global::System.Data.DataColumn("НаКонтроле", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаКонтроле);
                this.columnНомерВход = new global::System.Data.DataColumn("НомерВход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВход);
                this.columnНомерИсход = new global::System.Data.DataColumn("НомерИсход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерИсход);
                this.columnРезолюция = new global::System.Data.DataColumn("Резолюция", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезолюция);
                this.columnРезультатВыполнения = new global::System.Data.DataColumn("РезультатВыполнения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезультатВыполнения);
                this.columnСрокВыполнения = new global::System.Data.DataColumn("СрокВыполнения", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСрокВыполнения);
                this.columnномерПП = new global::System.Data.DataColumn("номерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnномерПП);
                this.columnFlagPersonData = new global::System.Data.DataColumn("FlagPersonData", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagPersonData);
                this.columnFlagCardRepeet = new global::System.Data.DataColumn("FlagCardRepeet", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagCardRepeet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_карточки}, true));
                this.columnid_карточки.AutoIncrement = true;
                this.columnid_карточки.AllowDBNull = false;
                this.columnid_карточки.ReadOnly = true;
                this.columnid_карточки.Unique = true;
                this.columnВДело.AllowDBNull = false;
                this.columnКраткоеСодержание.MaxLength = 2147483647;
                this.columnНаКонтроле.AllowDBNull = false;
                this.columnНомерВход.MaxLength = 50;
                this.columnНомерИсход.MaxLength = 50;
                this.columnРезолюция.MaxLength = 255;
                this.columnРезультатВыполнения.MaxLength = 255;
                this.columnFlagPersonData.AllowDBNull = false;
                this.columnFlagCardRepeet.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow NewКарточкаRow() {
                return ((КарточкаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new КарточкаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(КарточкаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.КарточкаRowChanged != null)) {
                    this.КарточкаRowChanged(this, new КарточкаRowChangeEvent(((КарточкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.КарточкаRowChanging != null)) {
                    this.КарточкаRowChanging(this, new КарточкаRowChangeEvent(((КарточкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.КарточкаRowDeleted != null)) {
                    this.КарточкаRowDeleted(this, new КарточкаRowChangeEvent(((КарточкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.КарточкаRowDeleting != null)) {
                    this.КарточкаRowDeleting(this, new КарточкаRowChangeEvent(((КарточкаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveКарточкаRow(КарточкаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "КарточкаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class РезолюцииDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnidРезолюции;
            
            private global::System.Data.DataColumn columnidКарточки;
            
            private global::System.Data.DataColumn columnidПодразделения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииDataTable() {
                this.TableName = "Резолюции";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal РезолюцииDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected РезолюцииDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idРезолюцииColumn {
                get {
                    return this.columnidРезолюции;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idКарточкиColumn {
                get {
                    return this.columnidКарточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idПодразделенияColumn {
                get {
                    return this.columnidПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow this[int index] {
                get {
                    return ((РезолюцииRow)(this.Rows[index]));
                }
            }
            
            public event РезолюцииRowChangeEventHandler РезолюцииRowChanging;
            
            public event РезолюцииRowChangeEventHandler РезолюцииRowChanged;
            
            public event РезолюцииRowChangeEventHandler РезолюцииRowDeleting;
            
            public event РезолюцииRowChangeEventHandler РезолюцииRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddРезолюцииRow(РезолюцииRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow AddРезолюцииRow(КарточкаRow parentКарточкаRowByFK_Резолюции_Карточка, ПодразделенияКомитетаRow parentПодразделенияКомитетаRowByFK_Резолюции_ПодразделенияКомитета) {
                РезолюцииRow rowРезолюцииRow = ((РезолюцииRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentКарточкаRowByFK_Резолюции_Карточка != null)) {
                    columnValuesArray[1] = parentКарточкаRowByFK_Резолюции_Карточка[0];
                }
                if ((parentПодразделенияКомитетаRowByFK_Резолюции_ПодразделенияКомитета != null)) {
                    columnValuesArray[2] = parentПодразделенияКомитетаRowByFK_Резолюции_ПодразделенияКомитета[0];
                }
                rowРезолюцииRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowРезолюцииRow);
                return rowРезолюцииRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow FindByidРезолюции(int idРезолюции) {
                return ((РезолюцииRow)(this.Rows.Find(new object[] {
                            idРезолюции})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                РезолюцииDataTable cln = ((РезолюцииDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new РезолюцииDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidРезолюции = base.Columns["idРезолюции"];
                this.columnidКарточки = base.Columns["idКарточки"];
                this.columnidПодразделения = base.Columns["idПодразделения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidРезолюции = new global::System.Data.DataColumn("idРезолюции", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidРезолюции);
                this.columnidКарточки = new global::System.Data.DataColumn("idКарточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidКарточки);
                this.columnidПодразделения = new global::System.Data.DataColumn("idПодразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidПодразделения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidРезолюции}, true));
                this.columnidРезолюции.AutoIncrement = true;
                this.columnidРезолюции.AllowDBNull = false;
                this.columnidРезолюции.ReadOnly = true;
                this.columnidРезолюции.Unique = true;
                this.columnidКарточки.AllowDBNull = false;
                this.columnidПодразделения.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow NewРезолюцииRow() {
                return ((РезолюцииRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new РезолюцииRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(РезолюцииRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.РезолюцииRowChanged != null)) {
                    this.РезолюцииRowChanged(this, new РезолюцииRowChangeEvent(((РезолюцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.РезолюцииRowChanging != null)) {
                    this.РезолюцииRowChanging(this, new РезолюцииRowChangeEvent(((РезолюцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.РезолюцииRowDeleted != null)) {
                    this.РезолюцииRowDeleted(this, new РезолюцииRowChangeEvent(((РезолюцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.РезолюцииRowDeleting != null)) {
                    this.РезолюцииRowDeleting(this, new РезолюцииRowChangeEvent(((РезолюцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveРезолюцииRow(РезолюцииRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "РезолюцииDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ВыборкаИсходящихДокументовDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_карточки;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnНК;
            
            private global::System.Data.DataColumn columnНН;
            
            private global::System.Data.DataColumn columnНПП;
            
            private global::System.Data.DataColumn columnНП;
            
            private global::System.Data.DataColumn columnБО;
            
            private global::System.Data.DataColumn columnТекстовыйНомер;
            
            private global::System.Data.DataColumn columnСодержание;
            
            private global::System.Data.DataColumn columnid_подразделения;
            
            private global::System.Data.DataColumn columnОписаниеПодразделения;
            
            private global::System.Data.DataColumn columnid_РуководителяПодразделения;
            
            private global::System.Data.DataColumn columnОписаниеРуководителя;
            
            private global::System.Data.DataColumn columnid_Адресата;
            
            private global::System.Data.DataColumn columnОписаниеАдресата;
            
            private global::System.Data.DataColumn columnid_ВходящегоДокумента;
            
            private global::System.Data.DataColumn columnДатаПоступВходящегоДокумента;
            
            private global::System.Data.DataColumn columnНомерВходВходящегоДокумента;
            
            private global::System.Data.DataColumn columnКраткоеСодержаниеВходящегоДокумента;
            
            private global::System.Data.DataColumn columnОписаниеДокумента;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовDataTable() {
                this.TableName = "ВыборкаИсходящихДокументов";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаИсходящихДокументовDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ВыборкаИсходящихДокументовDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_карточкиColumn {
                get {
                    return this.columnid_карточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НКColumn {
                get {
                    return this.columnНК;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ННColumn {
                get {
                    return this.columnНН;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НППColumn {
                get {
                    return this.columnНПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НПColumn {
                get {
                    return this.columnНП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn БОColumn {
                get {
                    return this.columnБО;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ТекстовыйНомерColumn {
                get {
                    return this.columnТекстовыйНомер;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn СодержаниеColumn {
                get {
                    return this.columnСодержание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_подразделенияColumn {
                get {
                    return this.columnid_подразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеПодразделенияColumn {
                get {
                    return this.columnОписаниеПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_РуководителяПодразделенияColumn {
                get {
                    return this.columnid_РуководителяПодразделения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеРуководителяColumn {
                get {
                    return this.columnОписаниеРуководителя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_АдресатаColumn {
                get {
                    return this.columnid_Адресата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеАдресатаColumn {
                get {
                    return this.columnОписаниеАдресата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_ВходящегоДокументаColumn {
                get {
                    return this.columnid_ВходящегоДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступВходящегоДокументаColumn {
                get {
                    return this.columnДатаПоступВходящегоДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходВходящегоДокументаColumn {
                get {
                    return this.columnНомерВходВходящегоДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КраткоеСодержаниеВходящегоДокументаColumn {
                get {
                    return this.columnКраткоеСодержаниеВходящегоДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеДокументаColumn {
                get {
                    return this.columnОписаниеДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовRow this[int index] {
                get {
                    return ((ВыборкаИсходящихДокументовRow)(this.Rows[index]));
                }
            }
            
            public event ВыборкаИсходящихДокументовRowChangeEventHandler ВыборкаИсходящихДокументовRowChanging;
            
            public event ВыборкаИсходящихДокументовRowChangeEventHandler ВыборкаИсходящихДокументовRowChanged;
            
            public event ВыборкаИсходящихДокументовRowChangeEventHandler ВыборкаИсходящихДокументовRowDeleting;
            
            public event ВыборкаИсходящихДокументовRowChangeEventHandler ВыборкаИсходящихДокументовRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddВыборкаИсходящихДокументовRow(ВыборкаИсходящихДокументовRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовRow AddВыборкаИсходящихДокументовRow(
                        int id_карточки, 
                        System.DateTime Дата, 
                        string НК, 
                        string НН, 
                        int НПП, 
                        string НП, 
                        string БО, 
                        string ТекстовыйНомер, 
                        string Содержание, 
                        int id_подразделения, 
                        string ОписаниеПодразделения, 
                        int id_РуководителяПодразделения, 
                        string ОписаниеРуководителя, 
                        int id_Адресата, 
                        string ОписаниеАдресата, 
                        int id_ВходящегоДокумента, 
                        System.DateTime ДатаПоступВходящегоДокумента, 
                        string НомерВходВходящегоДокумента, 
                        string КраткоеСодержаниеВходящегоДокумента, 
                        string ОписаниеДокумента) {
                ВыборкаИсходящихДокументовRow rowВыборкаИсходящихДокументовRow = ((ВыборкаИсходящихДокументовRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id_карточки,
                        Дата,
                        НК,
                        НН,
                        НПП,
                        НП,
                        БО,
                        ТекстовыйНомер,
                        Содержание,
                        id_подразделения,
                        ОписаниеПодразделения,
                        id_РуководителяПодразделения,
                        ОписаниеРуководителя,
                        id_Адресата,
                        ОписаниеАдресата,
                        id_ВходящегоДокумента,
                        ДатаПоступВходящегоДокумента,
                        НомерВходВходящегоДокумента,
                        КраткоеСодержаниеВходящегоДокумента,
                        ОписаниеДокумента};
                rowВыборкаИсходящихДокументовRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowВыборкаИсходящихДокументовRow);
                return rowВыборкаИсходящихДокументовRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ВыборкаИсходящихДокументовDataTable cln = ((ВыборкаИсходящихДокументовDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ВыборкаИсходящихДокументовDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_карточки = base.Columns["id_карточки"];
                this.columnДата = base.Columns["Дата"];
                this.columnНК = base.Columns["НК"];
                this.columnНН = base.Columns["НН"];
                this.columnНПП = base.Columns["НПП"];
                this.columnНП = base.Columns["НП"];
                this.columnБО = base.Columns["БО"];
                this.columnТекстовыйНомер = base.Columns["ТекстовыйНомер"];
                this.columnСодержание = base.Columns["Содержание"];
                this.columnid_подразделения = base.Columns["id_подразделения"];
                this.columnОписаниеПодразделения = base.Columns["ОписаниеПодразделения"];
                this.columnid_РуководителяПодразделения = base.Columns["id_РуководителяПодразделения"];
                this.columnОписаниеРуководителя = base.Columns["ОписаниеРуководителя"];
                this.columnid_Адресата = base.Columns["id_Адресата"];
                this.columnОписаниеАдресата = base.Columns["ОписаниеАдресата"];
                this.columnid_ВходящегоДокумента = base.Columns["id_ВходящегоДокумента"];
                this.columnДатаПоступВходящегоДокумента = base.Columns["ДатаПоступВходящегоДокумента"];
                this.columnНомерВходВходящегоДокумента = base.Columns["НомерВходВходящегоДокумента"];
                this.columnКраткоеСодержаниеВходящегоДокумента = base.Columns["КраткоеСодержаниеВходящегоДокумента"];
                this.columnОписаниеДокумента = base.Columns["ОписаниеДокумента"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_карточки = new global::System.Data.DataColumn("id_карточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_карточки);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnНК = new global::System.Data.DataColumn("НК", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНК);
                this.columnНН = new global::System.Data.DataColumn("НН", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНН);
                this.columnНПП = new global::System.Data.DataColumn("НПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНПП);
                this.columnНП = new global::System.Data.DataColumn("НП", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНП);
                this.columnБО = new global::System.Data.DataColumn("БО", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnБО);
                this.columnТекстовыйНомер = new global::System.Data.DataColumn("ТекстовыйНомер", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТекстовыйНомер);
                this.columnСодержание = new global::System.Data.DataColumn("Содержание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСодержание);
                this.columnid_подразделения = new global::System.Data.DataColumn("id_подразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_подразделения);
                this.columnОписаниеПодразделения = new global::System.Data.DataColumn("ОписаниеПодразделения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеПодразделения);
                this.columnid_РуководителяПодразделения = new global::System.Data.DataColumn("id_РуководителяПодразделения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_РуководителяПодразделения);
                this.columnОписаниеРуководителя = new global::System.Data.DataColumn("ОписаниеРуководителя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеРуководителя);
                this.columnid_Адресата = new global::System.Data.DataColumn("id_Адресата", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_Адресата);
                this.columnОписаниеАдресата = new global::System.Data.DataColumn("ОписаниеАдресата", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеАдресата);
                this.columnid_ВходящегоДокумента = new global::System.Data.DataColumn("id_ВходящегоДокумента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_ВходящегоДокумента);
                this.columnДатаПоступВходящегоДокумента = new global::System.Data.DataColumn("ДатаПоступВходящегоДокумента", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступВходящегоДокумента);
                this.columnНомерВходВходящегоДокумента = new global::System.Data.DataColumn("НомерВходВходящегоДокумента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВходВходящегоДокумента);
                this.columnКраткоеСодержаниеВходящегоДокумента = new global::System.Data.DataColumn("КраткоеСодержаниеВходящегоДокумента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКраткоеСодержаниеВходящегоДокумента);
                this.columnОписаниеДокумента = new global::System.Data.DataColumn("ОписаниеДокумента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеДокумента);
                this.columnid_карточки.AllowDBNull = false;
                this.columnДата.AllowDBNull = false;
                this.columnНК.AllowDBNull = false;
                this.columnНК.MaxLength = 5;
                this.columnНН.AllowDBNull = false;
                this.columnНН.MaxLength = 2;
                this.columnНПП.AllowDBNull = false;
                this.columnНП.MaxLength = 2;
                this.columnБО.MaxLength = 1;
                this.columnТекстовыйНомер.ReadOnly = true;
                this.columnТекстовыйНомер.MaxLength = 123;
                this.columnСодержание.AllowDBNull = false;
                this.columnСодержание.MaxLength = 2147483647;
                this.columnОписаниеПодразделения.MaxLength = 150;
                this.columnОписаниеРуководителя.MaxLength = 255;
                this.columnid_Адресата.AllowDBNull = false;
                this.columnОписаниеАдресата.MaxLength = 255;
                this.columnНомерВходВходящегоДокумента.ReadOnly = true;
                this.columnНомерВходВходящегоДокумента.MaxLength = 61;
                this.columnКраткоеСодержаниеВходящегоДокумента.MaxLength = 255;
                this.columnОписаниеДокумента.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовRow NewВыборкаИсходящихДокументовRow() {
                return ((ВыборкаИсходящихДокументовRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ВыборкаИсходящихДокументовRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ВыборкаИсходящихДокументовRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ВыборкаИсходящихДокументовRowChanged != null)) {
                    this.ВыборкаИсходящихДокументовRowChanged(this, new ВыборкаИсходящихДокументовRowChangeEvent(((ВыборкаИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ВыборкаИсходящихДокументовRowChanging != null)) {
                    this.ВыборкаИсходящихДокументовRowChanging(this, new ВыборкаИсходящихДокументовRowChangeEvent(((ВыборкаИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ВыборкаИсходящихДокументовRowDeleted != null)) {
                    this.ВыборкаИсходящихДокументовRowDeleted(this, new ВыборкаИсходящихДокументовRowChangeEvent(((ВыборкаИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ВыборкаИсходящихДокументовRowDeleting != null)) {
                    this.ВыборкаИсходящихДокументовRowDeleting(this, new ВыборкаИсходящихДокументовRowChangeEvent(((ВыборкаИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveВыборкаИсходящихДокументовRow(ВыборкаИсходящихДокументовRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ВыборкаИсходящихДокументовDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ВыборкаКоличествоИсходящихДокументовDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnОписаниеКорреспондента;
            
            private global::System.Data.DataColumn columnИсходящие_документы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовDataTable() {
                this.TableName = "ВыборкаКоличествоИсходящихДокументов";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаКоличествоИсходящихДокументовDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ВыборкаКоличествоИсходящихДокументовDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеКорреспондентаColumn {
                get {
                    return this.columnОписаниеКорреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Исходящие_документыColumn {
                get {
                    return this.columnИсходящие_документы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовRow this[int index] {
                get {
                    return ((ВыборкаКоличествоИсходящихДокументовRow)(this.Rows[index]));
                }
            }
            
            public event ВыборкаКоличествоИсходящихДокументовRowChangeEventHandler ВыборкаКоличествоИсходящихДокументовRowChanging;
            
            public event ВыборкаКоличествоИсходящихДокументовRowChangeEventHandler ВыборкаКоличествоИсходящихДокументовRowChanged;
            
            public event ВыборкаКоличествоИсходящихДокументовRowChangeEventHandler ВыборкаКоличествоИсходящихДокументовRowDeleting;
            
            public event ВыборкаКоличествоИсходящихДокументовRowChangeEventHandler ВыборкаКоличествоИсходящихДокументовRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddВыборкаКоличествоИсходящихДокументовRow(ВыборкаКоличествоИсходящихДокументовRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовRow AddВыборкаКоличествоИсходящихДокументовRow(string ОписаниеКорреспондента, int Исходящие_документы) {
                ВыборкаКоличествоИсходящихДокументовRow rowВыборкаКоличествоИсходящихДокументовRow = ((ВыборкаКоличествоИсходящихДокументовRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ОписаниеКорреспондента,
                        Исходящие_документы};
                rowВыборкаКоличествоИсходящихДокументовRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowВыборкаКоличествоИсходящихДокументовRow);
                return rowВыборкаКоличествоИсходящихДокументовRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ВыборкаКоличествоИсходящихДокументовDataTable cln = ((ВыборкаКоличествоИсходящихДокументовDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ВыборкаКоличествоИсходящихДокументовDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnОписаниеКорреспондента = base.Columns["ОписаниеКорреспондента"];
                this.columnИсходящие_документы = base.Columns["Исходящие документы"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnОписаниеКорреспондента = new global::System.Data.DataColumn("ОписаниеКорреспондента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеКорреспондента);
                this.columnИсходящие_документы = new global::System.Data.DataColumn("Исходящие документы", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИсходящие_документы);
                this.columnОписаниеКорреспондента.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовRow NewВыборкаКоличествоИсходящихДокументовRow() {
                return ((ВыборкаКоличествоИсходящихДокументовRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ВыборкаКоличествоИсходящихДокументовRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ВыборкаКоличествоИсходящихДокументовRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ВыборкаКоличествоИсходящихДокументовRowChanged != null)) {
                    this.ВыборкаКоличествоИсходящихДокументовRowChanged(this, new ВыборкаКоличествоИсходящихДокументовRowChangeEvent(((ВыборкаКоличествоИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ВыборкаКоличествоИсходящихДокументовRowChanging != null)) {
                    this.ВыборкаКоличествоИсходящихДокументовRowChanging(this, new ВыборкаКоличествоИсходящихДокументовRowChangeEvent(((ВыборкаКоличествоИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ВыборкаКоличествоИсходящихДокументовRowDeleted != null)) {
                    this.ВыборкаКоличествоИсходящихДокументовRowDeleted(this, new ВыборкаКоличествоИсходящихДокументовRowChangeEvent(((ВыборкаКоличествоИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ВыборкаКоличествоИсходящихДокументовRowDeleting != null)) {
                    this.ВыборкаКоличествоИсходящихДокументовRowDeleting(this, new ВыборкаКоличествоИсходящихДокументовRowChangeEvent(((ВыборкаКоличествоИсходящихДокументовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveВыборкаКоличествоИсходящихДокументовRow(ВыборкаКоличествоИсходящихДокументовRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ВыборкаКоличествоИсходящихДокументовDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Карточка1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid_карточки;
            
            private global::System.Data.DataColumn columnid_документа;
            
            private global::System.Data.DataColumn columnid_корреспондента;
            
            private global::System.Data.DataColumn columnВДело;
            
            private global::System.Data.DataColumn columnДатаИсхода;
            
            private global::System.Data.DataColumn columnДатаПоступ;
            
            private global::System.Data.DataColumn columnКраткоеСодержание;
            
            private global::System.Data.DataColumn columnНаКонтроле;
            
            private global::System.Data.DataColumn columnНомерВход;
            
            private global::System.Data.DataColumn columnНомерИсход;
            
            private global::System.Data.DataColumn columnРезолюция;
            
            private global::System.Data.DataColumn columnРезультатВыполнения;
            
            private global::System.Data.DataColumn columnСрокВыполнения;
            
            private global::System.Data.DataColumn columnномерПП;
            
            private global::System.Data.DataColumn columnОписаниеКорреспондента;
            
            private global::System.Data.DataColumn columnFlagPersonData;
            
            private global::System.Data.DataColumn columnFlagCardRepeet;
            
            private global::System.Data.DataColumn columnNameFileDocument;
            
            private global::System.Data.DataColumn columnGuidName;
            
            private global::System.Data.DataColumn columnMD5;
            
            private global::System.Data.DataColumn columnCountDoc;
            
            private global::System.Data.DataColumn columnidВидПоступленияДокумента;
            
            private global::System.Data.DataColumn columnDataWriterServerDoc;
            
            private global::System.Data.DataColumn columnNameFileDocumentVipNetEmailTitlePage;
            
            private global::System.Data.DataColumn columnFileDate;
            
            private global::System.Data.DataColumn columnFileDateTitlePage;
            
            private global::System.Data.DataColumn columnFlagAuto;
            
            private global::System.Data.DataColumn columnДСП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1DataTable() {
                this.TableName = "Карточка1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Карточка1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Карточка1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_карточкиColumn {
                get {
                    return this.columnid_карточки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_документаColumn {
                get {
                    return this.columnid_документа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn id_корреспондентаColumn {
                get {
                    return this.columnid_корреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ВДелоColumn {
                get {
                    return this.columnВДело;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаИсходаColumn {
                get {
                    return this.columnДатаИсхода;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДатаПоступColumn {
                get {
                    return this.columnДатаПоступ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn КраткоеСодержаниеColumn {
                get {
                    return this.columnКраткоеСодержание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НаКонтролеColumn {
                get {
                    return this.columnНаКонтроле;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерВходColumn {
                get {
                    return this.columnНомерВход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn НомерИсходColumn {
                get {
                    return this.columnНомерИсход;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезолюцияColumn {
                get {
                    return this.columnРезолюция;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn РезультатВыполненияColumn {
                get {
                    return this.columnРезультатВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn СрокВыполненияColumn {
                get {
                    return this.columnСрокВыполнения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn номерППColumn {
                get {
                    return this.columnномерПП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ОписаниеКорреспондентаColumn {
                get {
                    return this.columnОписаниеКорреспондента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagPersonDataColumn {
                get {
                    return this.columnFlagPersonData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagCardRepeetColumn {
                get {
                    return this.columnFlagCardRepeet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameFileDocumentColumn {
                get {
                    return this.columnNameFileDocument;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GuidNameColumn {
                get {
                    return this.columnGuidName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MD5Column {
                get {
                    return this.columnMD5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountDocColumn {
                get {
                    return this.columnCountDoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idВидПоступленияДокументаColumn {
                get {
                    return this.columnidВидПоступленияДокумента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataWriterServerDocColumn {
                get {
                    return this.columnDataWriterServerDoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameFileDocumentVipNetEmailTitlePageColumn {
                get {
                    return this.columnNameFileDocumentVipNetEmailTitlePage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDateColumn {
                get {
                    return this.columnFileDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDateTitlePageColumn {
                get {
                    return this.columnFileDateTitlePage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagAutoColumn {
                get {
                    return this.columnFlagAuto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ДСПColumn {
                get {
                    return this.columnДСП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1Row this[int index] {
                get {
                    return ((Карточка1Row)(this.Rows[index]));
                }
            }
            
            public event Карточка1RowChangeEventHandler Карточка1RowChanging;
            
            public event Карточка1RowChangeEventHandler Карточка1RowChanged;
            
            public event Карточка1RowChangeEventHandler Карточка1RowDeleting;
            
            public event Карточка1RowChangeEventHandler Карточка1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddКарточка1Row(Карточка1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1Row AddКарточка1Row(
                        int id_документа, 
                        int id_корреспондента, 
                        bool ВДело, 
                        System.DateTime ДатаИсхода, 
                        System.DateTime ДатаПоступ, 
                        string КраткоеСодержание, 
                        bool НаКонтроле, 
                        string НомерВход, 
                        string НомерИсход, 
                        string Резолюция, 
                        string РезультатВыполнения, 
                        System.DateTime СрокВыполнения, 
                        int номерПП, 
                        string ОписаниеКорреспондента, 
                        bool FlagPersonData, 
                        bool FlagCardRepeet, 
                        string NameFileDocument, 
                        string GuidName, 
                        string MD5, 
                        int CountDoc, 
                        int idВидПоступленияДокумента, 
                        System.DateTime DataWriterServerDoc, 
                        string NameFileDocumentVipNetEmailTitlePage, 
                        byte[] FileDate, 
                        byte[] FileDateTitlePage, 
                        bool FlagAuto, 
                        bool ДСП) {
                Карточка1Row rowКарточка1Row = ((Карточка1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        id_документа,
                        id_корреспондента,
                        ВДело,
                        ДатаИсхода,
                        ДатаПоступ,
                        КраткоеСодержание,
                        НаКонтроле,
                        НомерВход,
                        НомерИсход,
                        Резолюция,
                        РезультатВыполнения,
                        СрокВыполнения,
                        номерПП,
                        ОписаниеКорреспондента,
                        FlagPersonData,
                        FlagCardRepeet,
                        NameFileDocument,
                        GuidName,
                        MD5,
                        CountDoc,
                        idВидПоступленияДокумента,
                        DataWriterServerDoc,
                        NameFileDocumentVipNetEmailTitlePage,
                        FileDate,
                        FileDateTitlePage,
                        FlagAuto,
                        ДСП};
                rowКарточка1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowКарточка1Row);
                return rowКарточка1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1Row FindByid_карточки(int id_карточки) {
                return ((Карточка1Row)(this.Rows.Find(new object[] {
                            id_карточки})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Карточка1DataTable cln = ((Карточка1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Карточка1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid_карточки = base.Columns["id_карточки"];
                this.columnid_документа = base.Columns["id_документа"];
                this.columnid_корреспондента = base.Columns["id_корреспондента"];
                this.columnВДело = base.Columns["ВДело"];
                this.columnДатаИсхода = base.Columns["ДатаИсхода"];
                this.columnДатаПоступ = base.Columns["ДатаПоступ"];
                this.columnКраткоеСодержание = base.Columns["КраткоеСодержание"];
                this.columnНаКонтроле = base.Columns["НаКонтроле"];
                this.columnНомерВход = base.Columns["НомерВход"];
                this.columnНомерИсход = base.Columns["НомерИсход"];
                this.columnРезолюция = base.Columns["Резолюция"];
                this.columnРезультатВыполнения = base.Columns["РезультатВыполнения"];
                this.columnСрокВыполнения = base.Columns["СрокВыполнения"];
                this.columnномерПП = base.Columns["номерПП"];
                this.columnОписаниеКорреспондента = base.Columns["ОписаниеКорреспондента"];
                this.columnFlagPersonData = base.Columns["FlagPersonData"];
                this.columnFlagCardRepeet = base.Columns["FlagCardRepeet"];
                this.columnNameFileDocument = base.Columns["NameFileDocument"];
                this.columnGuidName = base.Columns["GuidName"];
                this.columnMD5 = base.Columns["MD5"];
                this.columnCountDoc = base.Columns["CountDoc"];
                this.columnidВидПоступленияДокумента = base.Columns["idВидПоступленияДокумента"];
                this.columnDataWriterServerDoc = base.Columns["DataWriterServerDoc"];
                this.columnNameFileDocumentVipNetEmailTitlePage = base.Columns["NameFileDocumentVipNetEmailTitlePage"];
                this.columnFileDate = base.Columns["FileDate"];
                this.columnFileDateTitlePage = base.Columns["FileDateTitlePage"];
                this.columnFlagAuto = base.Columns["FlagAuto"];
                this.columnДСП = base.Columns["ДСП"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid_карточки = new global::System.Data.DataColumn("id_карточки", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_карточки);
                this.columnid_документа = new global::System.Data.DataColumn("id_документа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_документа);
                this.columnid_корреспондента = new global::System.Data.DataColumn("id_корреспондента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_корреспондента);
                this.columnВДело = new global::System.Data.DataColumn("ВДело", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВДело);
                this.columnДатаИсхода = new global::System.Data.DataColumn("ДатаИсхода", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаИсхода);
                this.columnДатаПоступ = new global::System.Data.DataColumn("ДатаПоступ", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПоступ);
                this.columnКраткоеСодержание = new global::System.Data.DataColumn("КраткоеСодержание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКраткоеСодержание);
                this.columnНаКонтроле = new global::System.Data.DataColumn("НаКонтроле", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаКонтроле);
                this.columnНомерВход = new global::System.Data.DataColumn("НомерВход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерВход);
                this.columnНомерИсход = new global::System.Data.DataColumn("НомерИсход", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерИсход);
                this.columnРезолюция = new global::System.Data.DataColumn("Резолюция", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезолюция);
                this.columnРезультатВыполнения = new global::System.Data.DataColumn("РезультатВыполнения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРезультатВыполнения);
                this.columnСрокВыполнения = new global::System.Data.DataColumn("СрокВыполнения", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСрокВыполнения);
                this.columnномерПП = new global::System.Data.DataColumn("номерПП", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnномерПП);
                this.columnОписаниеКорреспондента = new global::System.Data.DataColumn("ОписаниеКорреспондента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОписаниеКорреспондента);
                this.columnFlagPersonData = new global::System.Data.DataColumn("FlagPersonData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagPersonData);
                this.columnFlagCardRepeet = new global::System.Data.DataColumn("FlagCardRepeet", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagCardRepeet);
                this.columnNameFileDocument = new global::System.Data.DataColumn("NameFileDocument", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameFileDocument);
                this.columnGuidName = new global::System.Data.DataColumn("GuidName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGuidName);
                this.columnMD5 = new global::System.Data.DataColumn("MD5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMD5);
                this.columnCountDoc = new global::System.Data.DataColumn("CountDoc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountDoc);
                this.columnidВидПоступленияДокумента = new global::System.Data.DataColumn("idВидПоступленияДокумента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidВидПоступленияДокумента);
                this.columnDataWriterServerDoc = new global::System.Data.DataColumn("DataWriterServerDoc", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataWriterServerDoc);
                this.columnNameFileDocumentVipNetEmailTitlePage = new global::System.Data.DataColumn("NameFileDocumentVipNetEmailTitlePage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameFileDocumentVipNetEmailTitlePage);
                this.columnFileDate = new global::System.Data.DataColumn("FileDate", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDate);
                this.columnFileDateTitlePage = new global::System.Data.DataColumn("FileDateTitlePage", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDateTitlePage);
                this.columnFlagAuto = new global::System.Data.DataColumn("FlagAuto", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagAuto);
                this.columnДСП = new global::System.Data.DataColumn("ДСП", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДСП);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_карточки}, true));
                this.columnid_карточки.AutoIncrement = true;
                this.columnid_карточки.AllowDBNull = false;
                this.columnid_карточки.ReadOnly = true;
                this.columnid_карточки.Unique = true;
                this.columnВДело.AllowDBNull = false;
                this.columnКраткоеСодержание.MaxLength = 255;
                this.columnНаКонтроле.AllowDBNull = false;
                this.columnНомерВход.MaxLength = 50;
                this.columnНомерИсход.MaxLength = 50;
                this.columnРезолюция.MaxLength = 255;
                this.columnРезультатВыполнения.MaxLength = 255;
                this.columnОписаниеКорреспондента.MaxLength = 255;
                this.columnFlagPersonData.AllowDBNull = false;
                this.columnFlagCardRepeet.AllowDBNull = false;
                this.columnNameFileDocument.MaxLength = 300;
                this.columnGuidName.MaxLength = 200;
                this.columnMD5.MaxLength = 50;
                this.columnNameFileDocumentVipNetEmailTitlePage.MaxLength = 300;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1Row NewКарточка1Row() {
                return ((Карточка1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Карточка1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Карточка1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Карточка1RowChanged != null)) {
                    this.Карточка1RowChanged(this, new Карточка1RowChangeEvent(((Карточка1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Карточка1RowChanging != null)) {
                    this.Карточка1RowChanging(this, new Карточка1RowChangeEvent(((Карточка1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Карточка1RowDeleted != null)) {
                    this.Карточка1RowDeleted(this, new Карточка1RowChangeEvent(((Карточка1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Карточка1RowDeleting != null)) {
                    this.Карточка1RowDeleting(this, new Карточка1RowChangeEvent(((Карточка1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveКарточка1Row(Карточка1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS1 ds = new DS1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Карточка1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ДокументыRow : global::System.Data.DataRow {
            
            private ДокументыDataTable tableДокументы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ДокументыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДокументы = ((ДокументыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_документа {
                get {
                    return ((int)(this[this.tableДокументы.id_документаColumn]));
                }
                set {
                    this[this.tableДокументы.id_документаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеДокумента {
                get {
                    try {
                        return ((string)(this[this.tableДокументы.ОписаниеДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеДокумента\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.ОписаниеДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Удален {
                get {
                    try {
                        return ((bool)(this[this.tableДокументы.УдаленColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Удален\' in table \'Документы\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableДокументы.УдаленColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеДокументаNull() {
                return this.IsNull(this.tableДокументы.ОписаниеДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеДокументаNull() {
                this[this.tableДокументы.ОписаниеДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsУдаленNull() {
                return this.IsNull(this.tableДокументы.УдаленColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetУдаленNull() {
                this[this.tableДокументы.УдаленColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow[] GetКарточкаRows() {
                if ((this.Table.ChildRelations["FK_Карточка_Документы1"] == null)) {
                    return new КарточкаRow[0];
                }
                else {
                    return ((КарточкаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Карточка_Документы1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class КарточкаИсходящаяRow : global::System.Data.DataRow {
            
            private КарточкаИсходящаяDataTable tableКарточкаИсходящая;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КарточкаИсходящаяRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableКарточкаИсходящая = ((КарточкаИсходящаяDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_карточки {
                get {
                    return ((int)(this[this.tableКарточкаИсходящая.id_карточкиColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.id_карточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableКарточкаИсходящая.ДатаColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерКомитета {
                get {
                    return ((string)(this[this.tableКарточкаИсходящая.НомерКомитетаColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.НомерКомитетаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Подразделения {
                get {
                    return ((int)(this[this.tableКарточкаИсходящая.id_ПодразделенияColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.id_ПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерНоменклатурный {
                get {
                    return ((string)(this[this.tableКарточкаИсходящая.НомерНоменклатурныйColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.НомерНоменклатурныйColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int НомерПорядковый {
                get {
                    return ((int)(this[this.tableКарточкаИсходящая.НомерПорядковыйColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.НомерПорядковыйColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Адресата {
                get {
                    return ((int)(this[this.tableКарточкаИсходящая.id_АдресатаColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.id_АдресатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Содержание {
                get {
                    return ((string)(this[this.tableКарточкаИсходящая.СодержаниеColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.СодержаниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_ВходящегоДокумента {
                get {
                    try {
                        return ((int)(this[this.tableКарточкаИсходящая.id_ВходящегоДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_ВходящегоДокумента\' in table \'КарточкаИсходящая\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableКарточкаИсходящая.id_ВходящегоДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagPersonData {
                get {
                    return ((bool)(this[this.tableКарточкаИсходящая.FlagPersonDataColumn]));
                }
                set {
                    this[this.tableКарточкаИсходящая.FlagPersonDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow КорреспондентыRow {
                get {
                    return ((КорреспондентыRow)(this.GetParentRow(this.Table.ParentRelations["FK_КарточкаИсходящая_Корреспонденты"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_КарточкаИсходящая_Корреспонденты"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow ПодразделенияКомитетаRow {
                get {
                    return ((ПодразделенияКомитетаRow)(this.GetParentRow(this.Table.ParentRelations["FK_КарточкаИсходящая_ПодразделенияКомитета"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_КарточкаИсходящая_ПодразделенияКомитета"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_ВходящегоДокументаNull() {
                return this.IsNull(this.tableКарточкаИсходящая.id_ВходящегоДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_ВходящегоДокументаNull() {
                this[this.tableКарточкаИсходящая.id_ВходящегоДокументаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class КорреспондентыRow : global::System.Data.DataRow {
            
            private КорреспондентыDataTable tableКорреспонденты;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КорреспондентыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableКорреспонденты = ((КорреспондентыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_корреспондента {
                get {
                    return ((int)(this[this.tableКорреспонденты.id_корреспондентаColumn]));
                }
                set {
                    this[this.tableКорреспонденты.id_корреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеКорреспондента {
                get {
                    try {
                        return ((string)(this[this.tableКорреспонденты.ОписаниеКорреспондентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеКорреспондента\' in table \'Корреспонденты\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableКорреспонденты.ОписаниеКорреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Удален {
                get {
                    try {
                        return ((bool)(this[this.tableКорреспонденты.УдаленColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Удален\' in table \'Корреспонденты\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКорреспонденты.УдаленColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеКорреспондентаNull() {
                return this.IsNull(this.tableКорреспонденты.ОписаниеКорреспондентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеКорреспондентаNull() {
                this[this.tableКорреспонденты.ОписаниеКорреспондентаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsУдаленNull() {
                return this.IsNull(this.tableКорреспонденты.УдаленColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetУдаленNull() {
                this[this.tableКорреспонденты.УдаленColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow[] GetКарточкаИсходящаяRows() {
                if ((this.Table.ChildRelations["FK_КарточкаИсходящая_Корреспонденты"] == null)) {
                    return new КарточкаИсходящаяRow[0];
                }
                else {
                    return ((КарточкаИсходящаяRow[])(base.GetChildRows(this.Table.ChildRelations["FK_КарточкаИсходящая_Корреспонденты"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow[] GetКарточкаRows() {
                if ((this.Table.ChildRelations["FK_Карточка_Корреспонденты1"] == null)) {
                    return new КарточкаRow[0];
                }
                else {
                    return ((КарточкаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Карточка_Корреспонденты1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ПодразделенияКомитетаRow : global::System.Data.DataRow {
            
            private ПодразделенияКомитетаDataTable tableПодразделенияКомитета;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПодразделенияКомитетаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПодразделенияКомитета = ((ПодразделенияКомитетаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_подразделения {
                get {
                    return ((int)(this[this.tableПодразделенияКомитета.id_подразделенияColumn]));
                }
                set {
                    this[this.tableПодразделенияКомитета.id_подразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеПодразделения {
                get {
                    return ((string)(this[this.tableПодразделенияКомитета.ОписаниеПодразделенияColumn]));
                }
                set {
                    this[this.tableПодразделенияКомитета.ОписаниеПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_РуководителяПодразделения {
                get {
                    return ((int)(this[this.tableПодразделенияКомитета.id_РуководителяПодразделенияColumn]));
                }
                set {
                    this[this.tableПодразделенияКомитета.id_РуководителяПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерПодразделения {
                get {
                    return ((string)(this[this.tableПодразделенияКомитета.НомерПодразделенияColumn]));
                }
                set {
                    this[this.tableПодразделенияКомитета.НомерПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string БуквенноеОбозначение {
                get {
                    try {
                        return ((string)(this[this.tableПодразделенияКомитета.БуквенноеОбозначениеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'БуквенноеОбозначение\' in table \'ПодразделенияКомитета\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableПодразделенияКомитета.БуквенноеОбозначениеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Удален {
                get {
                    try {
                        return ((bool)(this[this.tableПодразделенияКомитета.УдаленColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Удален\' in table \'ПодразделенияКомитета\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПодразделенияКомитета.УдаленColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow ПолучателиRow {
                get {
                    return ((ПолучателиRow)(this.GetParentRow(this.Table.ParentRelations["FK_ПодразделенияКомитета_ПолучателиРуководитель"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ПодразделенияКомитета_ПолучателиРуководитель"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsБуквенноеОбозначениеNull() {
                return this.IsNull(this.tableПодразделенияКомитета.БуквенноеОбозначениеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetБуквенноеОбозначениеNull() {
                this[this.tableПодразделенияКомитета.БуквенноеОбозначениеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsУдаленNull() {
                return this.IsNull(this.tableПодразделенияКомитета.УдаленColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetУдаленNull() {
                this[this.tableПодразделенияКомитета.УдаленColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow[] GetКарточкаИсходящаяRows() {
                if ((this.Table.ChildRelations["FK_КарточкаИсходящая_ПодразделенияКомитета"] == null)) {
                    return new КарточкаИсходящаяRow[0];
                }
                else {
                    return ((КарточкаИсходящаяRow[])(base.GetChildRows(this.Table.ChildRelations["FK_КарточкаИсходящая_ПодразделенияКомитета"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow[] GetРезолюцииRows() {
                if ((this.Table.ChildRelations["FK_Резолюции_ПодразделенияКомитета"] == null)) {
                    return new РезолюцииRow[0];
                }
                else {
                    return ((РезолюцииRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Резолюции_ПодразделенияКомитета"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ПолучателиRow : global::System.Data.DataRow {
            
            private ПолучателиDataTable tableПолучатели;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ПолучателиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПолучатели = ((ПолучателиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_получателя {
                get {
                    return ((int)(this[this.tableПолучатели.id_получателяColumn]));
                }
                set {
                    this[this.tableПолучатели.id_получателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеПолучателя {
                get {
                    try {
                        return ((string)(this[this.tableПолучатели.ОписаниеПолучателяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеПолучателя\' in table \'Получатели\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.ОписаниеПолучателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ИмяРегистрации {
                get {
                    try {
                        return ((int)(this[this.tableПолучатели.ИмяРегистрацииColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ИмяРегистрации\' in table \'Получатели\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.ИмяРегистрацииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Удален {
                get {
                    try {
                        return ((bool)(this[this.tableПолучатели.УдаленColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Удален\' in table \'Получатели\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПолучатели.УдаленColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеПолучателяNull() {
                return this.IsNull(this.tableПолучатели.ОписаниеПолучателяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеПолучателяNull() {
                this[this.tableПолучатели.ОписаниеПолучателяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsИмяРегистрацииNull() {
                return this.IsNull(this.tableПолучатели.ИмяРегистрацииColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetИмяРегистрацииNull() {
                this[this.tableПолучатели.ИмяРегистрацииColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsУдаленNull() {
                return this.IsNull(this.tableПолучатели.УдаленColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetУдаленNull() {
                this[this.tableПолучатели.УдаленColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow[] GetПодразделенияКомитетаRows() {
                if ((this.Table.ChildRelations["FK_ПодразделенияКомитета_ПолучателиРуководитель"] == null)) {
                    return new ПодразделенияКомитетаRow[0];
                }
                else {
                    return ((ПодразделенияКомитетаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ПодразделенияКомитета_ПолучателиРуководитель"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ВыборкаRow : global::System.Data.DataRow {
            
            private ВыборкаDataTable tableВыборка;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableВыборка = ((ВыборкаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_карточки {
                get {
                    return ((int)(this[this.tableВыборка.id_карточкиColumn]));
                }
                set {
                    this[this.tableВыборка.id_карточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеДокумента {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.ОписаниеДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеДокумента\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.ОписаниеДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеКорреспондента {
                get {
                    return ((string)(this[this.tableВыборка.ОписаниеКорреспондентаColumn]));
                }
                set {
                    this[this.tableВыборка.ОписаниеКорреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаИсхода {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableВыборка.ДатаИсходаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаИсхода\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.ДатаИсходаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерИсход {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.НомерИсходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерИсход\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.НомерИсходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableВыборка.ДатаПоступColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступ\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.ДатаПоступColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВход {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.НомерВходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВход\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.НомерВходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string КраткоеСодержание {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.КраткоеСодержаниеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КраткоеСодержание\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.КраткоеСодержаниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime СрокВыполнения {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableВыборка.СрокВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'СрокВыполнения\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.СрокВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Резолюция {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.РезолюцияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Резолюция\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.РезолюцияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ВДело {
                get {
                    return ((bool)(this[this.tableВыборка.ВДелоColumn]));
                }
                set {
                    this[this.tableВыборка.ВДелоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool НаКонтроле {
                get {
                    return ((bool)(this[this.tableВыборка.НаКонтролеColumn]));
                }
                set {
                    this[this.tableВыборка.НаКонтролеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string РезультатВыполнения {
                get {
                    try {
                        return ((string)(this[this.tableВыборка.РезультатВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'РезультатВыполнения\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.РезультатВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int номерПП {
                get {
                    try {
                        return ((int)(this[this.tableВыборка.номерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'номерПП\' in table \'Выборка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборка.номерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеДокументаNull() {
                return this.IsNull(this.tableВыборка.ОписаниеДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеДокументаNull() {
                this[this.tableВыборка.ОписаниеДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаИсходаNull() {
                return this.IsNull(this.tableВыборка.ДатаИсходаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаИсходаNull() {
                this[this.tableВыборка.ДатаИсходаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерИсходNull() {
                return this.IsNull(this.tableВыборка.НомерИсходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерИсходNull() {
                this[this.tableВыборка.НомерИсходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступNull() {
                return this.IsNull(this.tableВыборка.ДатаПоступColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступNull() {
                this[this.tableВыборка.ДатаПоступColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходNull() {
                return this.IsNull(this.tableВыборка.НомерВходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходNull() {
                this[this.tableВыборка.НомерВходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКраткоеСодержаниеNull() {
                return this.IsNull(this.tableВыборка.КраткоеСодержаниеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКраткоеСодержаниеNull() {
                this[this.tableВыборка.КраткоеСодержаниеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsСрокВыполненияNull() {
                return this.IsNull(this.tableВыборка.СрокВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetСрокВыполненияNull() {
                this[this.tableВыборка.СрокВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезолюцияNull() {
                return this.IsNull(this.tableВыборка.РезолюцияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезолюцияNull() {
                this[this.tableВыборка.РезолюцияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезультатВыполненияNull() {
                return this.IsNull(this.tableВыборка.РезультатВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезультатВыполненияNull() {
                this[this.tableВыборка.РезультатВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsномерППNull() {
                return this.IsNull(this.tableВыборка.номерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetномерППNull() {
                this[this.tableВыборка.номерППColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class КарточкаRow : global::System.Data.DataRow {
            
            private КарточкаDataTable tableКарточка;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal КарточкаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableКарточка = ((КарточкаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_карточки {
                get {
                    return ((int)(this[this.tableКарточка.id_карточкиColumn]));
                }
                set {
                    this[this.tableКарточка.id_карточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_документа {
                get {
                    try {
                        return ((int)(this[this.tableКарточка.id_документаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_документа\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.id_документаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_корреспондента {
                get {
                    try {
                        return ((int)(this[this.tableКарточка.id_корреспондентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_корреспондента\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.id_корреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ВДело {
                get {
                    return ((bool)(this[this.tableКарточка.ВДелоColumn]));
                }
                set {
                    this[this.tableКарточка.ВДелоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаИсхода {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка.ДатаИсходаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаИсхода\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.ДатаИсходаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка.ДатаПоступColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступ\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.ДатаПоступColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string КраткоеСодержание {
                get {
                    try {
                        return ((string)(this[this.tableКарточка.КраткоеСодержаниеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КраткоеСодержание\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.КраткоеСодержаниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool НаКонтроле {
                get {
                    return ((bool)(this[this.tableКарточка.НаКонтролеColumn]));
                }
                set {
                    this[this.tableКарточка.НаКонтролеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВход {
                get {
                    try {
                        return ((string)(this[this.tableКарточка.НомерВходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВход\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.НомерВходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерИсход {
                get {
                    try {
                        return ((string)(this[this.tableКарточка.НомерИсходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерИсход\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.НомерИсходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Резолюция {
                get {
                    try {
                        return ((string)(this[this.tableКарточка.РезолюцияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Резолюция\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.РезолюцияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string РезультатВыполнения {
                get {
                    try {
                        return ((string)(this[this.tableКарточка.РезультатВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'РезультатВыполнения\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.РезультатВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime СрокВыполнения {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка.СрокВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'СрокВыполнения\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.СрокВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int номерПП {
                get {
                    try {
                        return ((int)(this[this.tableКарточка.номерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'номерПП\' in table \'Карточка\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка.номерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FlagPersonData {
                get {
                    return ((byte)(this[this.tableКарточка.FlagPersonDataColumn]));
                }
                set {
                    this[this.tableКарточка.FlagPersonDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagCardRepeet {
                get {
                    return ((bool)(this[this.tableКарточка.FlagCardRepeetColumn]));
                }
                set {
                    this[this.tableКарточка.FlagCardRepeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow ДокументыRow {
                get {
                    return ((ДокументыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Карточка_Документы1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Карточка_Документы1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow КорреспондентыRow {
                get {
                    return ((КорреспондентыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Карточка_Корреспонденты1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Карточка_Корреспонденты1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_документаNull() {
                return this.IsNull(this.tableКарточка.id_документаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_документаNull() {
                this[this.tableКарточка.id_документаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_корреспондентаNull() {
                return this.IsNull(this.tableКарточка.id_корреспондентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_корреспондентаNull() {
                this[this.tableКарточка.id_корреспондентаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаИсходаNull() {
                return this.IsNull(this.tableКарточка.ДатаИсходаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаИсходаNull() {
                this[this.tableКарточка.ДатаИсходаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступNull() {
                return this.IsNull(this.tableКарточка.ДатаПоступColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступNull() {
                this[this.tableКарточка.ДатаПоступColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКраткоеСодержаниеNull() {
                return this.IsNull(this.tableКарточка.КраткоеСодержаниеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКраткоеСодержаниеNull() {
                this[this.tableКарточка.КраткоеСодержаниеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходNull() {
                return this.IsNull(this.tableКарточка.НомерВходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходNull() {
                this[this.tableКарточка.НомерВходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерИсходNull() {
                return this.IsNull(this.tableКарточка.НомерИсходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерИсходNull() {
                this[this.tableКарточка.НомерИсходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезолюцияNull() {
                return this.IsNull(this.tableКарточка.РезолюцияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезолюцияNull() {
                this[this.tableКарточка.РезолюцияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезультатВыполненияNull() {
                return this.IsNull(this.tableКарточка.РезультатВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезультатВыполненияNull() {
                this[this.tableКарточка.РезультатВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsСрокВыполненияNull() {
                return this.IsNull(this.tableКарточка.СрокВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetСрокВыполненияNull() {
                this[this.tableКарточка.СрокВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsномерППNull() {
                return this.IsNull(this.tableКарточка.номерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetномерППNull() {
                this[this.tableКарточка.номерППColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow[] GetРезолюцииRows() {
                if ((this.Table.ChildRelations["FK_Резолюции_Карточка"] == null)) {
                    return new РезолюцииRow[0];
                }
                else {
                    return ((РезолюцииRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Резолюции_Карточка"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class РезолюцииRow : global::System.Data.DataRow {
            
            private РезолюцииDataTable tableРезолюции;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal РезолюцииRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableРезолюции = ((РезолюцииDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idРезолюции {
                get {
                    return ((int)(this[this.tableРезолюции.idРезолюцииColumn]));
                }
                set {
                    this[this.tableРезолюции.idРезолюцииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idКарточки {
                get {
                    return ((int)(this[this.tableРезолюции.idКарточкиColumn]));
                }
                set {
                    this[this.tableРезолюции.idКарточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idПодразделения {
                get {
                    return ((int)(this[this.tableРезолюции.idПодразделенияColumn]));
                }
                set {
                    this[this.tableРезолюции.idПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow КарточкаRow {
                get {
                    return ((КарточкаRow)(this.GetParentRow(this.Table.ParentRelations["FK_Резолюции_Карточка"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Резолюции_Карточка"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow ПодразделенияКомитетаRow {
                get {
                    return ((ПодразделенияКомитетаRow)(this.GetParentRow(this.Table.ParentRelations["FK_Резолюции_ПодразделенияКомитета"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Резолюции_ПодразделенияКомитета"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ВыборкаИсходящихДокументовRow : global::System.Data.DataRow {
            
            private ВыборкаИсходящихДокументовDataTable tableВыборкаИсходящихДокументов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаИсходящихДокументовRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableВыборкаИсходящихДокументов = ((ВыборкаИсходящихДокументовDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_карточки {
                get {
                    return ((int)(this[this.tableВыборкаИсходящихДокументов.id_карточкиColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.id_карточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableВыборкаИсходящихДокументов.ДатаColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НК {
                get {
                    return ((string)(this[this.tableВыборкаИсходящихДокументов.НКColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.НКColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НН {
                get {
                    return ((string)(this[this.tableВыборкаИсходящихДокументов.ННColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ННColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int НПП {
                get {
                    return ((int)(this[this.tableВыборкаИсходящихДокументов.НППColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.НППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НП {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.НПColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НП\' in table \'ВыборкаИсходящихДокументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.НПColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string БО {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.БОColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'БО\' in table \'ВыборкаИсходящихДокументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.БОColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ТекстовыйНомер {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.ТекстовыйНомерColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ТекстовыйНомер\' in table \'ВыборкаИсходящихДокументов\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ТекстовыйНомерColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Содержание {
                get {
                    return ((string)(this[this.tableВыборкаИсходящихДокументов.СодержаниеColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.СодержаниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_подразделения {
                get {
                    try {
                        return ((int)(this[this.tableВыборкаИсходящихДокументов.id_подразделенияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_подразделения\' in table \'ВыборкаИсходящихДокументов\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.id_подразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеПодразделения {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.ОписаниеПодразделенияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеПодразделения\' in table \'ВыборкаИсходящихДокументов" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ОписаниеПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_РуководителяПодразделения {
                get {
                    try {
                        return ((int)(this[this.tableВыборкаИсходящихДокументов.id_РуководителяПодразделенияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_РуководителяПодразделения\' in table \'ВыборкаИсходящихДок" +
                                "ументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.id_РуководителяПодразделенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеРуководителя {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.ОписаниеРуководителяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеРуководителя\' in table \'ВыборкаИсходящихДокументов\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ОписаниеРуководителяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_Адресата {
                get {
                    return ((int)(this[this.tableВыборкаИсходящихДокументов.id_АдресатаColumn]));
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.id_АдресатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеАдресата {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.ОписаниеАдресатаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеАдресата\' in table \'ВыборкаИсходящихДокументов\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ОписаниеАдресатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_ВходящегоДокумента {
                get {
                    try {
                        return ((int)(this[this.tableВыборкаИсходящихДокументов.id_ВходящегоДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_ВходящегоДокумента\' in table \'ВыборкаИсходящихДокументов" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.id_ВходящегоДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступВходящегоДокумента {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableВыборкаИсходящихДокументов.ДатаПоступВходящегоДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступВходящегоДокумента\' in table \'ВыборкаИсходящихДок" +
                                "ументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ДатаПоступВходящегоДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВходВходящегоДокумента {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.НомерВходВходящегоДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВходВходящегоДокумента\' in table \'ВыборкаИсходящихДоку" +
                                "ментов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.НомерВходВходящегоДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string КраткоеСодержаниеВходящегоДокумента {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.КраткоеСодержаниеВходящегоДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КраткоеСодержаниеВходящегоДокумента\' in table \'ВыборкаИсход" +
                                "ящихДокументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.КраткоеСодержаниеВходящегоДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеДокумента {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаИсходящихДокументов.ОписаниеДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеДокумента\' in table \'ВыборкаИсходящихДокументов\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаИсходящихДокументов.ОписаниеДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНПNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.НПColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНПNull() {
                this[this.tableВыборкаИсходящихДокументов.НПColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsБОNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.БОColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetБОNull() {
                this[this.tableВыборкаИсходящихДокументов.БОColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsТекстовыйНомерNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ТекстовыйНомерColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetТекстовыйНомерNull() {
                this[this.tableВыборкаИсходящихДокументов.ТекстовыйНомерColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_подразделенияNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.id_подразделенияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_подразделенияNull() {
                this[this.tableВыборкаИсходящихДокументов.id_подразделенияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеПодразделенияNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ОписаниеПодразделенияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеПодразделенияNull() {
                this[this.tableВыборкаИсходящихДокументов.ОписаниеПодразделенияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_РуководителяПодразделенияNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.id_РуководителяПодразделенияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_РуководителяПодразделенияNull() {
                this[this.tableВыборкаИсходящихДокументов.id_РуководителяПодразделенияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеРуководителяNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ОписаниеРуководителяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеРуководителяNull() {
                this[this.tableВыборкаИсходящихДокументов.ОписаниеРуководителяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеАдресатаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ОписаниеАдресатаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеАдресатаNull() {
                this[this.tableВыборкаИсходящихДокументов.ОписаниеАдресатаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_ВходящегоДокументаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.id_ВходящегоДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_ВходящегоДокументаNull() {
                this[this.tableВыборкаИсходящихДокументов.id_ВходящегоДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступВходящегоДокументаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ДатаПоступВходящегоДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступВходящегоДокументаNull() {
                this[this.tableВыборкаИсходящихДокументов.ДатаПоступВходящегоДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходВходящегоДокументаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.НомерВходВходящегоДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходВходящегоДокументаNull() {
                this[this.tableВыборкаИсходящихДокументов.НомерВходВходящегоДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКраткоеСодержаниеВходящегоДокументаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.КраткоеСодержаниеВходящегоДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКраткоеСодержаниеВходящегоДокументаNull() {
                this[this.tableВыборкаИсходящихДокументов.КраткоеСодержаниеВходящегоДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеДокументаNull() {
                return this.IsNull(this.tableВыборкаИсходящихДокументов.ОписаниеДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеДокументаNull() {
                this[this.tableВыборкаИсходящихДокументов.ОписаниеДокументаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ВыборкаКоличествоИсходящихДокументовRow : global::System.Data.DataRow {
            
            private ВыборкаКоличествоИсходящихДокументовDataTable tableВыборкаКоличествоИсходящихДокументов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ВыборкаКоличествоИсходящихДокументовRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableВыборкаКоличествоИсходящихДокументов = ((ВыборкаКоличествоИсходящихДокументовDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеКорреспондента {
                get {
                    try {
                        return ((string)(this[this.tableВыборкаКоличествоИсходящихДокументов.ОписаниеКорреспондентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеКорреспондента\' in table \'ВыборкаКоличествоИсходящи" +
                                "хДокументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаКоличествоИсходящихДокументов.ОписаниеКорреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Исходящие_документы {
                get {
                    try {
                        return ((int)(this[this.tableВыборкаКоличествоИсходящихДокументов.Исходящие_документыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Исходящие документы\' in table \'ВыборкаКоличествоИсходящихДо" +
                                "кументов\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableВыборкаКоличествоИсходящихДокументов.Исходящие_документыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеКорреспондентаNull() {
                return this.IsNull(this.tableВыборкаКоличествоИсходящихДокументов.ОписаниеКорреспондентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеКорреспондентаNull() {
                this[this.tableВыборкаКоличествоИсходящихДокументов.ОписаниеКорреспондентаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsИсходящие_документыNull() {
                return this.IsNull(this.tableВыборкаКоличествоИсходящихДокументов.Исходящие_документыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetИсходящие_документыNull() {
                this[this.tableВыборкаКоличествоИсходящихДокументов.Исходящие_документыColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Карточка1Row : global::System.Data.DataRow {
            
            private Карточка1DataTable tableКарточка1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Карточка1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableКарточка1 = ((Карточка1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_карточки {
                get {
                    return ((int)(this[this.tableКарточка1.id_карточкиColumn]));
                }
                set {
                    this[this.tableКарточка1.id_карточкиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_документа {
                get {
                    try {
                        return ((int)(this[this.tableКарточка1.id_документаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_документа\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.id_документаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_корреспондента {
                get {
                    try {
                        return ((int)(this[this.tableКарточка1.id_корреспондентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_корреспондента\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.id_корреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ВДело {
                get {
                    return ((bool)(this[this.tableКарточка1.ВДелоColumn]));
                }
                set {
                    this[this.tableКарточка1.ВДелоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаИсхода {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка1.ДатаИсходаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаИсхода\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.ДатаИсходаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ДатаПоступ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка1.ДатаПоступColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДатаПоступ\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.ДатаПоступColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string КраткоеСодержание {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.КраткоеСодержаниеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'КраткоеСодержание\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.КраткоеСодержаниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool НаКонтроле {
                get {
                    return ((bool)(this[this.tableКарточка1.НаКонтролеColumn]));
                }
                set {
                    this[this.tableКарточка1.НаКонтролеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерВход {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.НомерВходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерВход\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.НомерВходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string НомерИсход {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.НомерИсходColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'НомерИсход\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.НомерИсходColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Резолюция {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.РезолюцияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Резолюция\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.РезолюцияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string РезультатВыполнения {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.РезультатВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'РезультатВыполнения\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.РезультатВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime СрокВыполнения {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка1.СрокВыполненияColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'СрокВыполнения\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.СрокВыполненияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int номерПП {
                get {
                    try {
                        return ((int)(this[this.tableКарточка1.номерППColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'номерПП\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.номерППColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ОписаниеКорреспондента {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.ОписаниеКорреспондентаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ОписаниеКорреспондента\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.ОписаниеКорреспондентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagPersonData {
                get {
                    return ((bool)(this[this.tableКарточка1.FlagPersonDataColumn]));
                }
                set {
                    this[this.tableКарточка1.FlagPersonDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagCardRepeet {
                get {
                    return ((bool)(this[this.tableКарточка1.FlagCardRepeetColumn]));
                }
                set {
                    this[this.tableКарточка1.FlagCardRepeetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameFileDocument {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.NameFileDocumentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameFileDocument\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.NameFileDocumentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GuidName {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.GuidNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GuidName\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.GuidNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MD5 {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.MD5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MD5\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.MD5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountDoc {
                get {
                    try {
                        return ((int)(this[this.tableКарточка1.CountDocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountDoc\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.CountDocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idВидПоступленияДокумента {
                get {
                    try {
                        return ((int)(this[this.tableКарточка1.idВидПоступленияДокументаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idВидПоступленияДокумента\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.idВидПоступленияДокументаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataWriterServerDoc {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableКарточка1.DataWriterServerDocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataWriterServerDoc\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.DataWriterServerDocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameFileDocumentVipNetEmailTitlePage {
                get {
                    try {
                        return ((string)(this[this.tableКарточка1.NameFileDocumentVipNetEmailTitlePageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameFileDocumentVipNetEmailTitlePage\' in table \'Карточка1\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.NameFileDocumentVipNetEmailTitlePageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] FileDate {
                get {
                    try {
                        return ((byte[])(this[this.tableКарточка1.FileDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileDate\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.FileDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] FileDateTitlePage {
                get {
                    try {
                        return ((byte[])(this[this.tableКарточка1.FileDateTitlePageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileDateTitlePage\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.FileDateTitlePageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagAuto {
                get {
                    try {
                        return ((bool)(this[this.tableКарточка1.FlagAutoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlagAuto\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.FlagAutoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ДСП {
                get {
                    try {
                        return ((bool)(this[this.tableКарточка1.ДСПColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ДСП\' in table \'Карточка1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableКарточка1.ДСПColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_документаNull() {
                return this.IsNull(this.tableКарточка1.id_документаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_документаNull() {
                this[this.tableКарточка1.id_документаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isid_корреспондентаNull() {
                return this.IsNull(this.tableКарточка1.id_корреспондентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setid_корреспондентаNull() {
                this[this.tableКарточка1.id_корреспондентаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаИсходаNull() {
                return this.IsNull(this.tableКарточка1.ДатаИсходаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаИсходаNull() {
                this[this.tableКарточка1.ДатаИсходаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДатаПоступNull() {
                return this.IsNull(this.tableКарточка1.ДатаПоступColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДатаПоступNull() {
                this[this.tableКарточка1.ДатаПоступColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsКраткоеСодержаниеNull() {
                return this.IsNull(this.tableКарточка1.КраткоеСодержаниеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetКраткоеСодержаниеNull() {
                this[this.tableКарточка1.КраткоеСодержаниеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерВходNull() {
                return this.IsNull(this.tableКарточка1.НомерВходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерВходNull() {
                this[this.tableКарточка1.НомерВходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsНомерИсходNull() {
                return this.IsNull(this.tableКарточка1.НомерИсходColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetНомерИсходNull() {
                this[this.tableКарточка1.НомерИсходColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезолюцияNull() {
                return this.IsNull(this.tableКарточка1.РезолюцияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезолюцияNull() {
                this[this.tableКарточка1.РезолюцияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsРезультатВыполненияNull() {
                return this.IsNull(this.tableКарточка1.РезультатВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetРезультатВыполненияNull() {
                this[this.tableКарточка1.РезультатВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsСрокВыполненияNull() {
                return this.IsNull(this.tableКарточка1.СрокВыполненияColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetСрокВыполненияNull() {
                this[this.tableКарточка1.СрокВыполненияColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsномерППNull() {
                return this.IsNull(this.tableКарточка1.номерППColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetномерППNull() {
                this[this.tableКарточка1.номерППColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsОписаниеКорреспондентаNull() {
                return this.IsNull(this.tableКарточка1.ОписаниеКорреспондентаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetОписаниеКорреспондентаNull() {
                this[this.tableКарточка1.ОписаниеКорреспондентаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameFileDocumentNull() {
                return this.IsNull(this.tableКарточка1.NameFileDocumentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameFileDocumentNull() {
                this[this.tableКарточка1.NameFileDocumentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGuidNameNull() {
                return this.IsNull(this.tableКарточка1.GuidNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGuidNameNull() {
                this[this.tableКарточка1.GuidNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMD5Null() {
                return this.IsNull(this.tableКарточка1.MD5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMD5Null() {
                this[this.tableКарточка1.MD5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountDocNull() {
                return this.IsNull(this.tableКарточка1.CountDocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountDocNull() {
                this[this.tableКарточка1.CountDocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidВидПоступленияДокументаNull() {
                return this.IsNull(this.tableКарточка1.idВидПоступленияДокументаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidВидПоступленияДокументаNull() {
                this[this.tableКарточка1.idВидПоступленияДокументаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataWriterServerDocNull() {
                return this.IsNull(this.tableКарточка1.DataWriterServerDocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataWriterServerDocNull() {
                this[this.tableКарточка1.DataWriterServerDocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameFileDocumentVipNetEmailTitlePageNull() {
                return this.IsNull(this.tableКарточка1.NameFileDocumentVipNetEmailTitlePageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameFileDocumentVipNetEmailTitlePageNull() {
                this[this.tableКарточка1.NameFileDocumentVipNetEmailTitlePageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileDateNull() {
                return this.IsNull(this.tableКарточка1.FileDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileDateNull() {
                this[this.tableКарточка1.FileDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileDateTitlePageNull() {
                return this.IsNull(this.tableКарточка1.FileDateTitlePageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileDateTitlePageNull() {
                this[this.tableКарточка1.FileDateTitlePageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagAutoNull() {
                return this.IsNull(this.tableКарточка1.FlagAutoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagAutoNull() {
                this[this.tableКарточка1.FlagAutoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsДСПNull() {
                return this.IsNull(this.tableКарточка1.ДСПColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetДСПNull() {
                this[this.tableКарточка1.ДСПColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ДокументыRowChangeEvent : global::System.EventArgs {
            
            private ДокументыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRowChangeEvent(ДокументыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ДокументыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class КарточкаИсходящаяRowChangeEvent : global::System.EventArgs {
            
            private КарточкаИсходящаяRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRowChangeEvent(КарточкаИсходящаяRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаИсходящаяRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class КорреспондентыRowChangeEvent : global::System.EventArgs {
            
            private КорреспондентыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRowChangeEvent(КорреспондентыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КорреспондентыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ПодразделенияКомитетаRowChangeEvent : global::System.EventArgs {
            
            private ПодразделенияКомитетаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRowChangeEvent(ПодразделенияКомитетаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПодразделенияКомитетаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ПолучателиRowChangeEvent : global::System.EventArgs {
            
            private ПолучателиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRowChangeEvent(ПолучателиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ПолучателиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ВыборкаRowChangeEvent : global::System.EventArgs {
            
            private ВыборкаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRowChangeEvent(ВыборкаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class КарточкаRowChangeEvent : global::System.EventArgs {
            
            private КарточкаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRowChangeEvent(КарточкаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public КарточкаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class РезолюцииRowChangeEvent : global::System.EventArgs {
            
            private РезолюцииRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRowChangeEvent(РезолюцииRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public РезолюцииRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ВыборкаИсходящихДокументовRowChangeEvent : global::System.EventArgs {
            
            private ВыборкаИсходящихДокументовRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовRowChangeEvent(ВыборкаИсходящихДокументовRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаИсходящихДокументовRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ВыборкаКоличествоИсходящихДокументовRowChangeEvent : global::System.EventArgs {
            
            private ВыборкаКоличествоИсходящихДокументовRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовRowChangeEvent(ВыборкаКоличествоИсходящихДокументовRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ВыборкаКоличествоИсходящихДокументовRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Карточка1RowChangeEvent : global::System.EventArgs {
            
            private Карточка1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1RowChangeEvent(Карточка1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Карточка1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RegKor.DS1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ДокументыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ДокументыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Документы";
            tableMapping.ColumnMappings.Add("id_документа", "id_документа");
            tableMapping.ColumnMappings.Add("ОписаниеДокумента", "ОписаниеДокумента");
            tableMapping.ColumnMappings.Add("Удален", "Удален");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Документы] WHERE (([id_документа] = @Original_id_документа) AND ((@IsNull_ОписаниеДокумента = 1 AND [ОписаниеДокумента] IS NULL) OR ([ОписаниеДокумента] = @Original_ОписаниеДокумента)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеДокумента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Документы] ([ОписаниеДокумента], [Удален]) VALUES (@ОписаниеДо" +
                "кумента, @Удален);\r\nSELECT id_документа, ОписаниеДокумента, Удален FROM Документ" +
                "ы WHERE (id_документа = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеДокумента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Документы] SET [ОписаниеДокумента] = @ОписаниеДокумента, [Удален] = @Удален WHERE (([id_документа] = @Original_id_документа) AND ((@IsNull_ОписаниеДокумента = 1 AND [ОписаниеДокумента] IS NULL) OR ([ОписаниеДокумента] = @Original_ОписаниеДокумента)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)));
SELECT id_документа, ОписаниеДокумента, Удален FROM Документы WHERE (id_документа = @id_документа)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеДокумента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеДокумента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеДокумента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_документа", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_документа, ОписаниеДокумента, Удален FROM dbo.Документы";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ДокументыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ДокументыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ДокументыDataTable dataTable = new DS1.ДокументыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.ДокументыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Документы");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id_документа, string Original_ОписаниеДокумента, global::System.Nullable<bool> Original_Удален) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_документа));
            if ((Original_ОписаниеДокумента == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ОписаниеДокумента));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ОписаниеДокумента, global::System.Nullable<bool> Удален) {
            if ((ОписаниеДокумента == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ОписаниеДокумента));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеДокумента, global::System.Nullable<bool> Удален, int Original_id_документа, string Original_ОписаниеДокумента, global::System.Nullable<bool> Original_Удален, int id_документа) {
            if ((ОписаниеДокумента == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ОписаниеДокумента));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_id_документа));
            if ((Original_ОписаниеДокумента == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ОписаниеДокумента));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(id_документа));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеДокумента, global::System.Nullable<bool> Удален, int Original_id_документа, string Original_ОписаниеДокумента, global::System.Nullable<bool> Original_Удален) {
            return this.Update(ОписаниеДокумента, Удален, Original_id_документа, Original_ОписаниеДокумента, Original_Удален, Original_id_документа);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class КарточкаИсходящаяTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public КарточкаИсходящаяTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "КарточкаИсходящая";
            tableMapping.ColumnMappings.Add("id_карточки", "id_карточки");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("НомерКомитета", "НомерКомитета");
            tableMapping.ColumnMappings.Add("id_Подразделения", "id_Подразделения");
            tableMapping.ColumnMappings.Add("НомерНоменклатурный", "НомерНоменклатурный");
            tableMapping.ColumnMappings.Add("НомерПорядковый", "НомерПорядковый");
            tableMapping.ColumnMappings.Add("id_Адресата", "id_Адресата");
            tableMapping.ColumnMappings.Add("Содержание", "Содержание");
            tableMapping.ColumnMappings.Add("id_ВходящегоДокумента", "id_ВходящегоДокумента");
            tableMapping.ColumnMappings.Add("FlagPersonData", "FlagPersonData");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [КарточкаИсходящая] ([Дата], [НомерКомитета], [id_Подразделения], [НомерНоменклатурный], [НомерПорядковый], [id_Адресата], [Содержание], [id_ВходящегоДокумента], [FlagPersonData]) VALUES (@Дата, @НомерКомитета, @id_Подразделения, @НомерНоменклатурный, @НомерПорядковый, @id_Адресата, @Содержание, @id_ВходящегоДокумента, @FlagPersonData)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерКомитета", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерКомитета", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_Подразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_Подразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерНоменклатурный", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерНоменклатурный", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПорядковый", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПорядковый", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_Адресата", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_Адресата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Содержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Содержание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_ВходящегоДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_ВходящегоДокумента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagPersonData", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPersonData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     id_карточки, Дата, НомерКомитета, id_Подразделения, НомерНоменклатурны" +
                "й, НомерПорядковый, id_Адресата, Содержание, \r\n                      id_Входящег" +
                "оДокумента,FlagPersonData\r\nFROM         КарточкаИсходящая";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.КарточкаИсходящаяDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.КарточкаИсходящаяDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.КарточкаИсходящаяDataTable dataTable = new DS1.КарточкаИсходящаяDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.КарточкаИсходящаяDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "КарточкаИсходящая");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime Дата, string НомерКомитета, int id_Подразделения, string НомерНоменклатурный, int НомерПорядковый, int id_Адресата, string Содержание, global::System.Nullable<int> id_ВходящегоДокумента, bool FlagPersonData) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(Дата));
            if ((НомерКомитета == null)) {
                throw new global::System.ArgumentNullException("НомерКомитета");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(НомерКомитета));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(id_Подразделения));
            if ((НомерНоменклатурный == null)) {
                throw new global::System.ArgumentNullException("НомерНоменклатурный");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(НомерНоменклатурный));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(НомерПорядковый));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(id_Адресата));
            if ((Содержание == null)) {
                throw new global::System.ArgumentNullException("Содержание");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Содержание));
            }
            if ((id_ВходящегоДокумента.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(id_ВходящегоДокумента.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(FlagPersonData));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class КорреспондентыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public КорреспондентыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Корреспонденты";
            tableMapping.ColumnMappings.Add("id_корреспондента", "id_корреспондента");
            tableMapping.ColumnMappings.Add("ОписаниеКорреспондента", "ОписаниеКорреспондента");
            tableMapping.ColumnMappings.Add("Удален", "Удален");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Корреспонденты] WHERE (([id_корреспондента] = @Original_id_корреспондента) AND ((@IsNull_ОписаниеКорреспондента = 1 AND [ОписаниеКорреспондента] IS NULL) OR ([ОписаниеКорреспондента] = @Original_ОписаниеКорреспондента)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКорреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Корреспонденты] ([ОписаниеКорреспондента], [Удален]) VALUES (@" +
                "ОписаниеКорреспондента, @Удален);\r\nSELECT id_корреспондента, ОписаниеКорреспонде" +
                "нта, Удален FROM Корреспонденты WHERE (id_корреспондента = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Корреспонденты] SET [ОписаниеКорреспондента] = @ОписаниеКорреспондента, [Удален] = @Удален WHERE (([id_корреспондента] = @Original_id_корреспондента) AND ((@IsNull_ОписаниеКорреспондента = 1 AND [ОписаниеКорреспондента] IS NULL) OR ([ОписаниеКорреспондента] = @Original_ОписаниеКорреспондента)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)));
SELECT id_корреспондента, ОписаниеКорреспондента, Удален FROM Корреспонденты WHERE (id_корреспондента = @id_корреспондента)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКорреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_корреспондента", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_корреспондента, ОписаниеКорреспондента, Удален FROM dbo.Корреспонденты";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.КорреспондентыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.КорреспондентыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.КорреспондентыDataTable dataTable = new DS1.КорреспондентыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.КорреспондентыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Корреспонденты");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id_корреспондента, string Original_ОписаниеКорреспондента, global::System.Nullable<bool> Original_Удален) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_корреспондента));
            if ((Original_ОписаниеКорреспондента == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ОписаниеКорреспондента));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ОписаниеКорреспондента, global::System.Nullable<bool> Удален) {
            if ((ОписаниеКорреспондента == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ОписаниеКорреспондента));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеКорреспондента, global::System.Nullable<bool> Удален, int Original_id_корреспондента, string Original_ОписаниеКорреспондента, global::System.Nullable<bool> Original_Удален, int id_корреспондента) {
            if ((ОписаниеКорреспондента == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ОписаниеКорреспондента));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_id_корреспондента));
            if ((Original_ОписаниеКорреспондента == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ОписаниеКорреспондента));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(id_корреспондента));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеКорреспондента, global::System.Nullable<bool> Удален, int Original_id_корреспондента, string Original_ОписаниеКорреспондента, global::System.Nullable<bool> Original_Удален) {
            return this.Update(ОписаниеКорреспондента, Удален, Original_id_корреспондента, Original_ОписаниеКорреспондента, Original_Удален, Original_id_корреспондента);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПодразделенияКомитетаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ПодразделенияКомитетаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ПодразделенияКомитета";
            tableMapping.ColumnMappings.Add("id_подразделения", "id_подразделения");
            tableMapping.ColumnMappings.Add("ОписаниеПодразделения", "ОписаниеПодразделения");
            tableMapping.ColumnMappings.Add("id_РуководителяПодразделения", "id_РуководителяПодразделения");
            tableMapping.ColumnMappings.Add("НомерПодразделения", "НомерПодразделения");
            tableMapping.ColumnMappings.Add("БуквенноеОбозначение", "БуквенноеОбозначение");
            tableMapping.ColumnMappings.Add("Удален", "Удален");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ПодразделенияКомитета] WHERE (([id_подразделения] = @Original_id_подразделения) AND ([ОписаниеПодразделения] = @Original_ОписаниеПодразделения) AND ([id_РуководителяПодразделения] = @Original_id_РуководителяПодразделения) AND ([НомерПодразделения] = @Original_НомерПодразделения) AND ((@IsNull_БуквенноеОбозначение = 1 AND [БуквенноеОбозначение] IS NULL) OR ([БуквенноеОбозначение] = @Original_БуквенноеОбозначение)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_подразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_подразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПодразделения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_РуководителяПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_РуководителяПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПодразделения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_БуквенноеОбозначение", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_БуквенноеОбозначение", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ПодразделенияКомитета] ([ОписаниеПодразделения], [id_РуководителяПодразделения], [НомерПодразделения], [БуквенноеОбозначение], [Удален]) VALUES (@ОписаниеПодразделения, @id_РуководителяПодразделения, @НомерПодразделения, @БуквенноеОбозначение, @Удален);
SELECT id_подразделения, ОписаниеПодразделения, id_РуководителяПодразделения, НомерПодразделения, БуквенноеОбозначение, Удален FROM ПодразделенияКомитета WHERE (id_подразделения = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПодразделения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_РуководителяПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_РуководителяПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПодразделения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@БуквенноеОбозначение", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ПодразделенияКомитета] SET [ОписаниеПодразделения] = @ОписаниеПодразделения, [id_РуководителяПодразделения] = @id_РуководителяПодразделения, [НомерПодразделения] = @НомерПодразделения, [БуквенноеОбозначение] = @БуквенноеОбозначение, [Удален] = @Удален WHERE (([id_подразделения] = @Original_id_подразделения) AND ([ОписаниеПодразделения] = @Original_ОписаниеПодразделения) AND ([id_РуководителяПодразделения] = @Original_id_РуководителяПодразделения) AND ([НомерПодразделения] = @Original_НомерПодразделения) AND ((@IsNull_БуквенноеОбозначение = 1 AND [БуквенноеОбозначение] IS NULL) OR ([БуквенноеОбозначение] = @Original_БуквенноеОбозначение)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)));
SELECT id_подразделения, ОписаниеПодразделения, id_РуководителяПодразделения, НомерПодразделения, БуквенноеОбозначение, Удален FROM ПодразделенияКомитета WHERE (id_подразделения = @id_подразделения)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПодразделения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_РуководителяПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_РуководителяПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПодразделения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@БуквенноеОбозначение", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_подразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_подразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПодразделения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_РуководителяПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_РуководителяПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПодразделения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_БуквенноеОбозначение", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_БуквенноеОбозначение", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "БуквенноеОбозначение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_подразделения", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_подразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_подразделения, ОписаниеПодразделения, id_РуководителяПодразделения, Ном" +
                "ерПодразделения, БуквенноеОбозначение, Удален FROM dbo.ПодразделенияКомитета";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ПодразделенияКомитетаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ПодразделенияКомитетаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ПодразделенияКомитетаDataTable dataTable = new DS1.ПодразделенияКомитетаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.ПодразделенияКомитетаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "ПодразделенияКомитета");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id_подразделения, string Original_ОписаниеПодразделения, int Original_id_РуководителяПодразделения, string Original_НомерПодразделения, string Original_БуквенноеОбозначение, global::System.Nullable<bool> Original_Удален) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_подразделения));
            if ((Original_ОписаниеПодразделения == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеПодразделения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ОписаниеПодразделения));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_id_РуководителяПодразделения));
            if ((Original_НомерПодразделения == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПодразделения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_НомерПодразделения));
            }
            if ((Original_БуквенноеОбозначение == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_БуквенноеОбозначение));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ОписаниеПодразделения, int id_РуководителяПодразделения, string НомерПодразделения, string БуквенноеОбозначение, global::System.Nullable<bool> Удален) {
            if ((ОписаниеПодразделения == null)) {
                throw new global::System.ArgumentNullException("ОписаниеПодразделения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ОписаниеПодразделения));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(id_РуководителяПодразделения));
            if ((НомерПодразделения == null)) {
                throw new global::System.ArgumentNullException("НомерПодразделения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(НомерПодразделения));
            }
            if ((БуквенноеОбозначение == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(БуквенноеОбозначение));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеПодразделения, int id_РуководителяПодразделения, string НомерПодразделения, string БуквенноеОбозначение, global::System.Nullable<bool> Удален, int Original_id_подразделения, string Original_ОписаниеПодразделения, int Original_id_РуководителяПодразделения, string Original_НомерПодразделения, string Original_БуквенноеОбозначение, global::System.Nullable<bool> Original_Удален, int id_подразделения) {
            if ((ОписаниеПодразделения == null)) {
                throw new global::System.ArgumentNullException("ОписаниеПодразделения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ОписаниеПодразделения));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(id_РуководителяПодразделения));
            if ((НомерПодразделения == null)) {
                throw new global::System.ArgumentNullException("НомерПодразделения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(НомерПодразделения));
            }
            if ((БуквенноеОбозначение == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(БуквенноеОбозначение));
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_id_подразделения));
            if ((Original_ОписаниеПодразделения == null)) {
                throw new global::System.ArgumentNullException("Original_ОписаниеПодразделения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_ОписаниеПодразделения));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_id_РуководителяПодразделения));
            if ((Original_НомерПодразделения == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПодразделения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_НомерПодразделения));
            }
            if ((Original_БуквенноеОбозначение == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_БуквенноеОбозначение));
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(id_подразделения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеПодразделения, int id_РуководителяПодразделения, string НомерПодразделения, string БуквенноеОбозначение, global::System.Nullable<bool> Удален, int Original_id_подразделения, string Original_ОписаниеПодразделения, int Original_id_РуководителяПодразделения, string Original_НомерПодразделения, string Original_БуквенноеОбозначение, global::System.Nullable<bool> Original_Удален) {
            return this.Update(ОписаниеПодразделения, id_РуководителяПодразделения, НомерПодразделения, БуквенноеОбозначение, Удален, Original_id_подразделения, Original_ОписаниеПодразделения, Original_id_РуководителяПодразделения, Original_НомерПодразделения, Original_БуквенноеОбозначение, Original_Удален, Original_id_подразделения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПолучателиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ПолучателиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Получатели";
            tableMapping.ColumnMappings.Add("id_получателя", "id_получателя");
            tableMapping.ColumnMappings.Add("ОписаниеПолучателя", "ОписаниеПолучателя");
            tableMapping.ColumnMappings.Add("ИмяРегистрации", "ИмяРегистрации");
            tableMapping.ColumnMappings.Add("Удален", "Удален");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Получатели] WHERE (([id_получателя] = @Original_id_получателя) AND ((@IsNull_ОписаниеПолучателя = 1 AND [ОписаниеПолучателя] IS NULL) OR ([ОписаниеПолучателя] = @Original_ОписаниеПолучателя)) AND ((@IsNull_ИмяРегистрации = 1 AND [ИмяРегистрации] IS NULL) OR ([ИмяРегистрации] = @Original_ИмяРегистрации)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_получателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_получателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеПолучателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПолучателя", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Получатели] ([ОписаниеПолучателя], [ИмяРегистрации], [Удален]) VALUES (@ОписаниеПолучателя, @ИмяРегистрации, @Удален);
SELECT id_получателя, ОписаниеПолучателя, ИмяРегистрации, Удален FROM Получатели WHERE (id_получателя = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПолучателя", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Получатели] SET [ОписаниеПолучателя] = @ОписаниеПолучателя, [ИмяРегистрации] = @ИмяРегистрации, [Удален] = @Удален WHERE (([id_получателя] = @Original_id_получателя) AND ((@IsNull_ОписаниеПолучателя = 1 AND [ОписаниеПолучателя] IS NULL) OR ([ОписаниеПолучателя] = @Original_ОписаниеПолучателя)) AND ((@IsNull_ИмяРегистрации = 1 AND [ИмяРегистрации] IS NULL) OR ([ИмяРегистрации] = @Original_ИмяРегистрации)) AND ((@IsNull_Удален = 1 AND [Удален] IS NULL) OR ([Удален] = @Original_Удален)));
SELECT id_получателя, ОписаниеПолучателя, ИмяРегистрации, Удален FROM Получатели WHERE (id_получателя = @id_получателя)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеПолучателя", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_получателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_получателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеПолучателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеПолучателя", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеПолучателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИмяРегистрации", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИмяРегистрации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Удален", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Удален", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Удален", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_получателя", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_получателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_получателя, ОписаниеПолучателя, ИмяРегистрации, Удален FROM dbo.Получат" +
                "ели";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ПолучателиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ПолучателиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ПолучателиDataTable dataTable = new DS1.ПолучателиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.ПолучателиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Получатели");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id_получателя, string Original_ОписаниеПолучателя, global::System.Nullable<int> Original_ИмяРегистрации, global::System.Nullable<bool> Original_Удален) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_получателя));
            if ((Original_ОписаниеПолучателя == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ОписаниеПолучателя));
            }
            if ((Original_ИмяРегистрации.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ИмяРегистрации.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ОписаниеПолучателя, global::System.Nullable<int> ИмяРегистрации, global::System.Nullable<bool> Удален) {
            if ((ОписаниеПолучателя == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ОписаниеПолучателя));
            }
            if ((ИмяРегистрации.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ИмяРегистрации.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеПолучателя, global::System.Nullable<int> ИмяРегистрации, global::System.Nullable<bool> Удален, int Original_id_получателя, string Original_ОписаниеПолучателя, global::System.Nullable<int> Original_ИмяРегистрации, global::System.Nullable<bool> Original_Удален, int id_получателя) {
            if ((ОписаниеПолучателя == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ОписаниеПолучателя));
            }
            if ((ИмяРегистрации.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ИмяРегистрации.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_id_получателя));
            if ((Original_ОписаниеПолучателя == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_ОписаниеПолучателя));
            }
            if ((Original_ИмяРегистрации.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ИмяРегистрации.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_Удален.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_Удален.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(id_получателя));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ОписаниеПолучателя, global::System.Nullable<int> ИмяРегистрации, global::System.Nullable<bool> Удален, int Original_id_получателя, string Original_ОписаниеПолучателя, global::System.Nullable<int> Original_ИмяРегистрации, global::System.Nullable<bool> Original_Удален) {
            return this.Update(ОписаниеПолучателя, ИмяРегистрации, Удален, Original_id_получателя, Original_ОписаниеПолучателя, Original_ИмяРегистрации, Original_Удален, Original_id_получателя);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ВыборкаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ВыборкаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Выборка";
            tableMapping.ColumnMappings.Add("id_карточки", "id_карточки");
            tableMapping.ColumnMappings.Add("ОписаниеДокумента", "ОписаниеДокумента");
            tableMapping.ColumnMappings.Add("ОписаниеКорреспондента", "ОписаниеКорреспондента");
            tableMapping.ColumnMappings.Add("ДатаИсхода", "ДатаИсхода");
            tableMapping.ColumnMappings.Add("НомерИсход", "НомерИсход");
            tableMapping.ColumnMappings.Add("ДатаПоступ", "ДатаПоступ");
            tableMapping.ColumnMappings.Add("НомерВход", "НомерВход");
            tableMapping.ColumnMappings.Add("КраткоеСодержание", "КраткоеСодержание");
            tableMapping.ColumnMappings.Add("СрокВыполнения", "СрокВыполнения");
            tableMapping.ColumnMappings.Add("Резолюция", "Резолюция");
            tableMapping.ColumnMappings.Add("ВДело", "ВДело");
            tableMapping.ColumnMappings.Add("НаКонтроле", "НаКонтроле");
            tableMapping.ColumnMappings.Add("РезультатВыполнения", "РезультатВыполнения");
            tableMapping.ColumnMappings.Add("номерПП", "номерПП");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_карточки, ОписаниеДокумента, ОписаниеКорреспондента, ДатаИсхода, НомерИ" +
                "сход, ДатаПоступ, НомерВход, КраткоеСодержание, СрокВыполнения, Резолюция, ВДело" +
                ", НаКонтроле, РезультатВыполнения,номерПП FROM dbo.Выборка";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ВыборкаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ВыборкаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ВыборкаDataTable dataTable = new DS1.ВыборкаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class КарточкаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public КарточкаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Карточка";
            tableMapping.ColumnMappings.Add("id_карточки", "id_карточки");
            tableMapping.ColumnMappings.Add("id_документа", "id_документа");
            tableMapping.ColumnMappings.Add("id_корреспондента", "id_корреспондента");
            tableMapping.ColumnMappings.Add("ВДело", "ВДело");
            tableMapping.ColumnMappings.Add("ДатаИсхода", "ДатаИсхода");
            tableMapping.ColumnMappings.Add("ДатаПоступ", "ДатаПоступ");
            tableMapping.ColumnMappings.Add("КраткоеСодержание", "КраткоеСодержание");
            tableMapping.ColumnMappings.Add("НаКонтроле", "НаКонтроле");
            tableMapping.ColumnMappings.Add("НомерВход", "НомерВход");
            tableMapping.ColumnMappings.Add("НомерИсход", "НомерИсход");
            tableMapping.ColumnMappings.Add("Резолюция", "Резолюция");
            tableMapping.ColumnMappings.Add("РезультатВыполнения", "РезультатВыполнения");
            tableMapping.ColumnMappings.Add("СрокВыполнения", "СрокВыполнения");
            tableMapping.ColumnMappings.Add("номерПП", "номерПП");
            tableMapping.ColumnMappings.Add("FlagCardRepeet", "FlagCardRepeet");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Карточка] WHERE (([id_карточки] = @Original_id_карточки) AND ((@IsNull_id_документа = 1 AND [id_документа] IS NULL) OR ([id_документа] = @Original_id_документа)) AND ((@IsNull_id_корреспондента = 1 AND [id_корреспондента] IS NULL) OR ([id_корреспондента] = @Original_id_корреспондента)) AND ([ВДело] = @Original_ВДело) AND ((@IsNull_ДатаИсхода = 1 AND [ДатаИсхода] IS NULL) OR ([ДатаИсхода] = @Original_ДатаИсхода)) AND ((@IsNull_ДатаПоступ = 1 AND [ДатаПоступ] IS NULL) OR ([ДатаПоступ] = @Original_ДатаПоступ)) AND ((@IsNull_КраткоеСодержание = 1 AND [КраткоеСодержание] IS NULL) OR ([КраткоеСодержание] = @Original_КраткоеСодержание)) AND ([НаКонтроле] = @Original_НаКонтроле) AND ((@IsNull_НомерВход = 1 AND [НомерВход] IS NULL) OR ([НомерВход] = @Original_НомерВход)) AND ((@IsNull_НомерИсход = 1 AND [НомерИсход] IS NULL) OR ([НомерИсход] = @Original_НомерИсход)) AND ((@IsNull_Резолюция = 1 AND [Резолюция] IS NULL) OR ([Резолюция] = @Original_Резолюция)) AND ((@IsNull_РезультатВыполнения = 1 AND [РезультатВыполнения] IS NULL) OR ([РезультатВыполнения] = @Original_РезультатВыполнения)) AND ((@IsNull_СрокВыполнения = 1 AND [СрокВыполнения] IS NULL) OR ([СрокВыполнения] = @Original_СрокВыполнения)) AND ((@IsNull_номерПП = 1 AND [номерПП] IS NULL) OR ([номерПП] = @Original_номерПП)) AND ([FlagCardRepeet] = @Original_FlagCardRepeet))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_карточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаИсхода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаПоступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_КраткоеСодержание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерВход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерИсход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Резолюция", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_РезультатВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_СрокВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Карточка] ([id_документа], [id_корреспондента], [ВДело], [ДатаИсхода], [ДатаПоступ], [КраткоеСодержание], [НаКонтроле], [НомерВход], [НомерИсход], [Резолюция], [РезультатВыполнения], [СрокВыполнения], [номерПП], [FlagCardRepeet]) VALUES (@id_документа, @id_корреспондента, @ВДело, @ДатаИсхода, @ДатаПоступ, @КраткоеСодержание, @НаКонтроле, @НомерВход, @НомерИсход, @Резолюция, @РезультатВыполнения, @СрокВыполнения, @номерПП, @FlagCardRepeet);
SELECT id_карточки, id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, FlagCardRepeet FROM Карточка WHERE (id_карточки = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Карточка] SET [id_документа] = @id_документа, [id_корреспондента] = @id_к" +
                "орреспондента, [ВДело] = @ВДело, [ДатаИсхода] = @ДатаИсхода, [ДатаПоступ] = @Дат" +
                "аПоступ, [КраткоеСодержание] = @КраткоеСодержание, [НаКонтроле] = @НаКонтроле, [" +
                "НомерВход] = @НомерВход, [НомерИсход] = @НомерИсход, [Резолюция] = @Резолюция, [" +
                "РезультатВыполнения] = @РезультатВыполнения, [СрокВыполнения] = @СрокВыполнения," +
                " [номерПП] = @номерПП, [FlagCardRepeet] = @FlagCardRepeet WHERE (([id_карточки] " +
                "= @Original_id_карточки) AND ((@IsNull_id_документа = 1 AND [id_документа] IS NU" +
                "LL) OR ([id_документа] = @Original_id_документа)) AND ((@IsNull_id_корреспондент" +
                "а = 1 AND [id_корреспондента] IS NULL) OR ([id_корреспондента] = @Original_id_ко" +
                "рреспондента)) AND ([ВДело] = @Original_ВДело) AND ((@IsNull_ДатаИсхода = 1 AND " +
                "[ДатаИсхода] IS NULL) OR ([ДатаИсхода] = @Original_ДатаИсхода)) AND ((@IsNull_Да" +
                "таПоступ = 1 AND [ДатаПоступ] IS NULL) OR ([ДатаПоступ] = @Original_ДатаПоступ))" +
                " AND ((@IsNull_КраткоеСодержание = 1 AND [КраткоеСодержание] IS NULL) OR ([Кратк" +
                "оеСодержание] = @Original_КраткоеСодержание)) AND ([НаКонтроле] = @Original_НаКо" +
                "нтроле) AND ((@IsNull_НомерВход = 1 AND [НомерВход] IS NULL) OR ([НомерВход] = @" +
                "Original_НомерВход)) AND ((@IsNull_НомерИсход = 1 AND [НомерИсход] IS NULL) OR (" +
                "[НомерИсход] = @Original_НомерИсход)) AND ((@IsNull_Резолюция = 1 AND [Резолюция" +
                "] IS NULL) OR ([Резолюция] = @Original_Резолюция)) AND ((@IsNull_РезультатВыполн" +
                "ения = 1 AND [РезультатВыполнения] IS NULL) OR ([РезультатВыполнения] = @Origina" +
                "l_РезультатВыполнения)) AND ((@IsNull_СрокВыполнения = 1 AND [СрокВыполнения] IS" +
                " NULL) OR ([СрокВыполнения] = @Original_СрокВыполнения)) AND ((@IsNull_номерПП =" +
                " 1 AND [номерПП] IS NULL) OR ([номерПП] = @Original_номерПП)) AND ([FlagCardRepe" +
                "et] = @Original_FlagCardRepeet));\r\nSELECT id_карточки, id_документа, id_корреспо" +
                "ндента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход," +
                " НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, FlagCardRe" +
                "peet FROM Карточка WHERE (id_карточки = @id_карточки)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_карточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаИсхода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаПоступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_КраткоеСодержание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерВход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерИсход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Резолюция", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_РезультатВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_СрокВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_карточки", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id_карточки, id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПосту" +
                "п, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВып" +
                "олнения, СрокВыполнения, номерПП, FlagCardRepeet FROM Карточка";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.КарточкаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.КарточкаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.КарточкаDataTable dataTable = new DS1.КарточкаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.КарточкаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Карточка");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id_карточки, global::System.Nullable<int> Original_id_документа, global::System.Nullable<int> Original_id_корреспондента, bool Original_ВДело, global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, string Original_КраткоеСодержание, bool Original_НаКонтроле, string Original_НомерВход, string Original_НомерИсход, string Original_Резолюция, string Original_РезультатВыполнения, global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, global::System.Nullable<int> Original_номерПП, bool Original_FlagCardRepeet) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_карточки));
            if ((Original_id_документа.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_id_документа.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_id_корреспондента.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_id_корреспондента.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_ВДело));
            if ((Original_ДатаИсхода.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_ДатаИсхода.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_ДатаПоступ.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_ДатаПоступ.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_КраткоеСодержание == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_КраткоеСодержание));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_НаКонтроле));
            if ((Original_НомерВход == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_НомерВход));
            }
            if ((Original_НомерИсход == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_НомерИсход));
            }
            if ((Original_Резолюция == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Резолюция));
            }
            if ((Original_РезультатВыполнения == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_РезультатВыполнения));
            }
            if ((Original_СрокВыполнения.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((System.DateTime)(Original_СрокВыполнения.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_номерПП.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_номерПП.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[25].Value = ((bool)(Original_FlagCardRepeet));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> id_документа, global::System.Nullable<int> id_корреспондента, bool ВДело, global::System.Nullable<global::System.DateTime> ДатаИсхода, global::System.Nullable<global::System.DateTime> ДатаПоступ, string КраткоеСодержание, bool НаКонтроле, string НомерВход, string НомерИсход, string Резолюция, string РезультатВыполнения, global::System.Nullable<global::System.DateTime> СрокВыполнения, global::System.Nullable<int> номерПП, bool FlagCardRepeet) {
            if ((id_документа.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id_документа.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((id_корреспондента.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(id_корреспондента.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(ВДело));
            if ((ДатаИсхода.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(ДатаИсхода.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ДатаПоступ.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ДатаПоступ.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((КраткоеСодержание == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(КраткоеСодержание));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(НаКонтроле));
            if ((НомерВход == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(НомерВход));
            }
            if ((НомерИсход == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(НомерИсход));
            }
            if ((Резолюция == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Резолюция));
            }
            if ((РезультатВыполнения == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(РезультатВыполнения));
            }
            if ((СрокВыполнения.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(СрокВыполнения.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((номерПП.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(номерПП.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(FlagCardRepeet));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> id_документа, 
                    global::System.Nullable<int> id_корреспондента, 
                    bool ВДело, 
                    global::System.Nullable<global::System.DateTime> ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> ДатаПоступ, 
                    string КраткоеСодержание, 
                    bool НаКонтроле, 
                    string НомерВход, 
                    string НомерИсход, 
                    string Резолюция, 
                    string РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> СрокВыполнения, 
                    global::System.Nullable<int> номерПП, 
                    bool FlagCardRepeet, 
                    int Original_id_карточки, 
                    global::System.Nullable<int> Original_id_документа, 
                    global::System.Nullable<int> Original_id_корреспондента, 
                    bool Original_ВДело, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, 
                    string Original_КраткоеСодержание, 
                    bool Original_НаКонтроле, 
                    string Original_НомерВход, 
                    string Original_НомерИсход, 
                    string Original_Резолюция, 
                    string Original_РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, 
                    global::System.Nullable<int> Original_номерПП, 
                    bool Original_FlagCardRepeet, 
                    int id_карточки) {
            if ((id_документа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id_документа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((id_корреспондента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(id_корреспондента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(ВДело));
            if ((ДатаИсхода.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(ДатаИсхода.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ДатаПоступ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ДатаПоступ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((КраткоеСодержание == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(КраткоеСодержание));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(НаКонтроле));
            if ((НомерВход == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(НомерВход));
            }
            if ((НомерИсход == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(НомерИсход));
            }
            if ((Резолюция == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Резолюция));
            }
            if ((РезультатВыполнения == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(РезультатВыполнения));
            }
            if ((СрокВыполнения.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(СрокВыполнения.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((номерПП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(номерПП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(FlagCardRepeet));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_id_карточки));
            if ((Original_id_документа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_id_документа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_id_корреспондента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_id_корреспондента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_ВДело));
            if ((Original_ДатаИсхода.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_ДатаИсхода.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_ДатаПоступ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_ДатаПоступ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_КраткоеСодержание == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_КраткоеСодержание));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_НаКонтроле));
            if ((Original_НомерВход == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_НомерВход));
            }
            if ((Original_НомерИсход == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_НомерИсход));
            }
            if ((Original_Резолюция == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Резолюция));
            }
            if ((Original_РезультатВыполнения == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_РезультатВыполнения));
            }
            if ((Original_СрокВыполнения.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(Original_СрокВыполнения.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_номерПП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_номерПП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_FlagCardRepeet));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(id_карточки));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> id_документа, 
                    global::System.Nullable<int> id_корреспондента, 
                    bool ВДело, 
                    global::System.Nullable<global::System.DateTime> ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> ДатаПоступ, 
                    string КраткоеСодержание, 
                    bool НаКонтроле, 
                    string НомерВход, 
                    string НомерИсход, 
                    string Резолюция, 
                    string РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> СрокВыполнения, 
                    global::System.Nullable<int> номерПП, 
                    bool FlagCardRepeet, 
                    int Original_id_карточки, 
                    global::System.Nullable<int> Original_id_документа, 
                    global::System.Nullable<int> Original_id_корреспондента, 
                    bool Original_ВДело, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, 
                    string Original_КраткоеСодержание, 
                    bool Original_НаКонтроле, 
                    string Original_НомерВход, 
                    string Original_НомерИсход, 
                    string Original_Резолюция, 
                    string Original_РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, 
                    global::System.Nullable<int> Original_номерПП, 
                    bool Original_FlagCardRepeet) {
            return this.Update(id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, FlagCardRepeet, Original_id_карточки, Original_id_документа, Original_id_корреспондента, Original_ВДело, Original_ДатаИсхода, Original_ДатаПоступ, Original_КраткоеСодержание, Original_НаКонтроле, Original_НомерВход, Original_НомерИсход, Original_Резолюция, Original_РезультатВыполнения, Original_СрокВыполнения, Original_номерПП, Original_FlagCardRepeet, Original_id_карточки);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class РезолюцииTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public РезолюцииTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Резолюции";
            tableMapping.ColumnMappings.Add("idРезолюции", "idРезолюции");
            tableMapping.ColumnMappings.Add("idКарточки", "idКарточки");
            tableMapping.ColumnMappings.Add("idПодразделения", "idПодразделения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Резолюции] WHERE (([idРезолюции] = @Original_idРезолюции) AND " +
                "([idКарточки] = @Original_idКарточки) AND ([idПодразделения] = @Original_idПодра" +
                "зделения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idРезолюции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idРезолюции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idКарточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idКарточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Резолюции] ([idКарточки], [idПодразделения]) VALUES (@idКарточ" +
                "ки, @idПодразделения);\r\nSELECT idРезолюции, idКарточки, idПодразделения FROM Рез" +
                "олюции WHERE (idРезолюции = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idКарточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idКарточки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Резолюции] SET [idКарточки] = @idКарточки, [idПодразделения] = @idПодразделения WHERE (([idРезолюции] = @Original_idРезолюции) AND ([idКарточки] = @Original_idКарточки) AND ([idПодразделения] = @Original_idПодразделения));
SELECT idРезолюции, idКарточки, idПодразделения FROM Резолюции WHERE (idРезолюции = @idРезолюции)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idКарточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idКарточки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idПодразделения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idРезолюции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idРезолюции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idКарточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idКарточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idПодразделения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idПодразделения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idРезолюции", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "idРезолюции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idРезолюции, idКарточки, idПодразделения FROM dbo.Резолюции";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.РезолюцииDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.РезолюцииDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.РезолюцииDataTable dataTable = new DS1.РезолюцииDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.РезолюцииDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Резолюции");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_idРезолюции, int Original_idКарточки, int Original_idПодразделения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_idРезолюции));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_idКарточки));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_idПодразделения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int idКарточки, int idПодразделения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(idКарточки));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(idПодразделения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int idКарточки, int idПодразделения, int Original_idРезолюции, int Original_idКарточки, int Original_idПодразделения, int idРезолюции) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(idКарточки));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(idПодразделения));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_idРезолюции));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_idКарточки));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_idПодразделения));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(idРезолюции));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int idКарточки, int idПодразделения, int Original_idРезолюции, int Original_idКарточки, int Original_idПодразделения) {
            return this.Update(idКарточки, idПодразделения, Original_idРезолюции, Original_idКарточки, Original_idПодразделения, Original_idРезолюции);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ВыборкаИсходящихДокументовTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ВыборкаИсходящихДокументовTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ВыборкаИсходящихДокументов";
            tableMapping.ColumnMappings.Add("id_карточки", "id_карточки");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("НК", "НК");
            tableMapping.ColumnMappings.Add("НН", "НН");
            tableMapping.ColumnMappings.Add("НПП", "НПП");
            tableMapping.ColumnMappings.Add("НП", "НП");
            tableMapping.ColumnMappings.Add("БО", "БО");
            tableMapping.ColumnMappings.Add("ТекстовыйНомер", "ТекстовыйНомер");
            tableMapping.ColumnMappings.Add("Содержание", "Содержание");
            tableMapping.ColumnMappings.Add("id_подразделения", "id_подразделения");
            tableMapping.ColumnMappings.Add("ОписаниеПодразделения", "ОписаниеПодразделения");
            tableMapping.ColumnMappings.Add("id_РуководителяПодразделения", "id_РуководителяПодразделения");
            tableMapping.ColumnMappings.Add("ОписаниеРуководителя", "ОписаниеРуководителя");
            tableMapping.ColumnMappings.Add("id_Адресата", "id_Адресата");
            tableMapping.ColumnMappings.Add("ОписаниеАдресата", "ОписаниеАдресата");
            tableMapping.ColumnMappings.Add("id_ВходящегоДокумента", "id_ВходящегоДокумента");
            tableMapping.ColumnMappings.Add("ДатаПоступВходящегоДокумента", "ДатаПоступВходящегоДокумента");
            tableMapping.ColumnMappings.Add("НомерВходВходящегоДокумента", "НомерВходВходящегоДокумента");
            tableMapping.ColumnMappings.Add("КраткоеСодержаниеВходящегоДокумента", "КраткоеСодержаниеВходящегоДокумента");
            tableMapping.ColumnMappings.Add("ОписаниеДокумента", "ОписаниеДокумента");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id_карточки, Дата, НК, НН, НПП, НП, БО, ТекстовыйНомер, Содержание, id_подразделения, ОписаниеПодразделения, id_РуководителяПодразделения, ОписаниеРуководителя, id_Адресата, ОписаниеАдресата, id_ВходящегоДокумента, ДатаПоступВходящегоДокумента, НомерВходВходящегоДокумента, КраткоеСодержаниеВходящегоДокумента, ОписаниеДокумента FROM dbo.ВыборкаИсходящихДокументов";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ВыборкаИсходящихДокументовDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ВыборкаИсходящихДокументовDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ВыборкаИсходящихДокументовDataTable dataTable = new DS1.ВыборкаИсходящихДокументовDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ВыборкаКоличествоИсходящихДокументовTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ВыборкаКоличествоИсходящихДокументовTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ВыборкаКоличествоИсходящихДокументов";
            tableMapping.ColumnMappings.Add("ОписаниеКорреспондента", "ОписаниеКорреспондента");
            tableMapping.ColumnMappings.Add("Исходящие документы", "Исходящие документы");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ОписаниеКорреспондента, [Исходящие документы] FROM ВыборкаКоличествоИсходя" +
                "щихДокументов";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.ВыборкаКоличествоИсходящихДокументовDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.ВыборкаКоличествоИсходящихДокументовDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.ВыборкаКоличествоИсходящихДокументовDataTable dataTable = new DS1.ВыборкаКоличествоИсходящихДокументовDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Карточка1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Карточка1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Карточка1";
            tableMapping.ColumnMappings.Add("id_карточки", "id_карточки");
            tableMapping.ColumnMappings.Add("id_документа", "id_документа");
            tableMapping.ColumnMappings.Add("id_корреспондента", "id_корреспондента");
            tableMapping.ColumnMappings.Add("ВДело", "ВДело");
            tableMapping.ColumnMappings.Add("ДатаИсхода", "ДатаИсхода");
            tableMapping.ColumnMappings.Add("ДатаПоступ", "ДатаПоступ");
            tableMapping.ColumnMappings.Add("КраткоеСодержание", "КраткоеСодержание");
            tableMapping.ColumnMappings.Add("НаКонтроле", "НаКонтроле");
            tableMapping.ColumnMappings.Add("НомерВход", "НомерВход");
            tableMapping.ColumnMappings.Add("НомерИсход", "НомерИсход");
            tableMapping.ColumnMappings.Add("Резолюция", "Резолюция");
            tableMapping.ColumnMappings.Add("РезультатВыполнения", "РезультатВыполнения");
            tableMapping.ColumnMappings.Add("СрокВыполнения", "СрокВыполнения");
            tableMapping.ColumnMappings.Add("номерПП", "номерПП");
            tableMapping.ColumnMappings.Add("ОписаниеКорреспондента", "ОписаниеКорреспондента");
            tableMapping.ColumnMappings.Add("FlagPersonData", "FlagPersonData");
            tableMapping.ColumnMappings.Add("FlagCardRepeet", "FlagCardRepeet");
            tableMapping.ColumnMappings.Add("NameFileDocument", "NameFileDocument");
            tableMapping.ColumnMappings.Add("GuidName", "GuidName");
            tableMapping.ColumnMappings.Add("MD5", "MD5");
            tableMapping.ColumnMappings.Add("CountDoc", "CountDoc");
            tableMapping.ColumnMappings.Add("idВидПоступленияДокумента", "idВидПоступленияДокумента");
            tableMapping.ColumnMappings.Add("DataWriterServerDoc", "DataWriterServerDoc");
            tableMapping.ColumnMappings.Add("NameFileDocumentVipNetEmailTitlePage", "NameFileDocumentVipNetEmailTitlePage");
            tableMapping.ColumnMappings.Add("FileDate", "FileDate");
            tableMapping.ColumnMappings.Add("FileDateTitlePage", "FileDateTitlePage");
            tableMapping.ColumnMappings.Add("FlagAuto", "FlagAuto");
            tableMapping.ColumnMappings.Add("ДСП", "ДСП");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Карточка] WHERE (([id_карточки] = @Original_id_карточки) AND (" +
                "(@IsNull_id_документа = 1 AND [id_документа] IS NULL) OR ([id_документа] = @Orig" +
                "inal_id_документа)) AND ((@IsNull_id_корреспондента = 1 AND [id_корреспондента] " +
                "IS NULL) OR ([id_корреспондента] = @Original_id_корреспондента)) AND ([ВДело] = " +
                "@Original_ВДело) AND ((@IsNull_ДатаИсхода = 1 AND [ДатаИсхода] IS NULL) OR ([Дат" +
                "аИсхода] = @Original_ДатаИсхода)) AND ((@IsNull_ДатаПоступ = 1 AND [ДатаПоступ] " +
                "IS NULL) OR ([ДатаПоступ] = @Original_ДатаПоступ)) AND ((@IsNull_КраткоеСодержан" +
                "ие = 1 AND [КраткоеСодержание] IS NULL) OR ([КраткоеСодержание] = @Original_Крат" +
                "коеСодержание)) AND ([НаКонтроле] = @Original_НаКонтроле) AND ((@IsNull_НомерВхо" +
                "д = 1 AND [НомерВход] IS NULL) OR ([НомерВход] = @Original_НомерВход)) AND ((@Is" +
                "Null_НомерИсход = 1 AND [НомерИсход] IS NULL) OR ([НомерИсход] = @Original_Номер" +
                "Исход)) AND ((@IsNull_Резолюция = 1 AND [Резолюция] IS NULL) OR ([Резолюция] = @" +
                "Original_Резолюция)) AND ((@IsNull_РезультатВыполнения = 1 AND [РезультатВыполне" +
                "ния] IS NULL) OR ([РезультатВыполнения] = @Original_РезультатВыполнения)) AND ((" +
                "@IsNull_СрокВыполнения = 1 AND [СрокВыполнения] IS NULL) OR ([СрокВыполнения] = " +
                "@Original_СрокВыполнения)) AND ((@IsNull_номерПП = 1 AND [номерПП] IS NULL) OR (" +
                "[номерПП] = @Original_номерПП)) AND ((@IsNull_ОписаниеКорреспондента = 1 AND [Оп" +
                "исаниеКорреспондента] IS NULL) OR ([ОписаниеКорреспондента] = @Original_Описание" +
                "Корреспондента)) AND ([FlagPersonData] = @Original_FlagPersonData) AND ([FlagCar" +
                "dRepeet] = @Original_FlagCardRepeet) AND ((@IsNull_NameFileDocument = 1 AND [Nam" +
                "eFileDocument] IS NULL) OR ([NameFileDocument] = @Original_NameFileDocument)) AN" +
                "D ((@IsNull_GuidName = 1 AND [GuidName] IS NULL) OR ([GuidName] = @Original_Guid" +
                "Name)) AND ((@IsNull_MD5 = 1 AND [MD5] IS NULL) OR ([MD5] = @Original_MD5)) AND " +
                "((@IsNull_CountDoc = 1 AND [CountDoc] IS NULL) OR ([CountDoc] = @Original_CountD" +
                "oc)) AND ((@IsNull_idВидПоступленияДокумента = 1 AND [idВидПоступленияДокумента]" +
                " IS NULL) OR ([idВидПоступленияДокумента] = @Original_idВидПоступленияДокумента)" +
                ") AND ((@IsNull_DataWriterServerDoc = 1 AND [DataWriterServerDoc] IS NULL) OR ([" +
                "DataWriterServerDoc] = @Original_DataWriterServerDoc)) AND ((@IsNull_NameFileDoc" +
                "umentVipNetEmailTitlePage = 1 AND [NameFileDocumentVipNetEmailTitlePage] IS NULL" +
                ") OR ([NameFileDocumentVipNetEmailTitlePage] = @Original_NameFileDocumentVipNetE" +
                "mailTitlePage)) AND ((@IsNull_FlagAuto = 1 AND [FlagAuto] IS NULL) OR ([FlagAuto" +
                "] = @Original_FlagAuto)) AND ((@IsNull_ДСП = 1 AND [ДСП] IS NULL) OR ([ДСП] = @O" +
                "riginal_ДСП)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_карточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаИсхода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаПоступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_КраткоеСодержание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерВход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерИсход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Резолюция", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_РезультатВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_СрокВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКорреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagPersonData", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPersonData", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NameFileDocument", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NameFileDocument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GuidName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GuidName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MD5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MD5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DataWriterServerDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DataWriterServerDoc", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FlagAuto", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagAuto", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДСП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДСП", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Карточка] ([id_документа], [id_корреспондента], [ВДело], [ДатаИсхода], [ДатаПоступ], [КраткоеСодержание], [НаКонтроле], [НомерВход], [НомерИсход], [Резолюция], [РезультатВыполнения], [СрокВыполнения], [номерПП], [ОписаниеКорреспондента], [FlagPersonData], [FlagCardRepeet], [NameFileDocument], [GuidName], [MD5], [CountDoc], [idВидПоступленияДокумента], [DataWriterServerDoc], [NameFileDocumentVipNetEmailTitlePage], [FileDate], [FileDateTitlePage], [FlagAuto], [ДСП]) VALUES (@id_документа, @id_корреспондента, @ВДело, @ДатаИсхода, @ДатаПоступ, @КраткоеСодержание, @НаКонтроле, @НомерВход, @НомерИсход, @Резолюция, @РезультатВыполнения, @СрокВыполнения, @номерПП, @ОписаниеКорреспондента, @FlagPersonData, @FlagCardRepeet, @NameFileDocument, @GuidName, @MD5, @CountDoc, @idВидПоступленияДокумента, @DataWriterServerDoc, @NameFileDocumentVipNetEmailTitlePage, @FileDate, @FileDateTitlePage, @FlagAuto, @ДСП);
SELECT id_карточки, id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, ОписаниеКорреспондента, FlagPersonData, FlagCardRepeet, NameFileDocument, GuidName, MD5, CountDoc, idВидПоступленияДокумента, DataWriterServerDoc, NameFileDocumentVipNetEmailTitlePage, FileDate, FileDateTitlePage, FlagAuto, ДСП FROM Карточка WHERE (id_карточки = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagPersonData", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPersonData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NameFileDocument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GuidName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MD5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataWriterServerDoc", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileDate", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileDateTitlePage", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileDateTitlePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagAuto", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДСП", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Карточка] SET [id_документа] = @id_документа, [id_корреспондента] =" +
                " @id_корреспондента, [ВДело] = @ВДело, [ДатаИсхода] = @ДатаИсхода, [ДатаПоступ] " +
                "= @ДатаПоступ, [КраткоеСодержание] = @КраткоеСодержание, [НаКонтроле] = @НаКонтр" +
                "оле, [НомерВход] = @НомерВход, [НомерИсход] = @НомерИсход, [Резолюция] = @Резолю" +
                "ция, [РезультатВыполнения] = @РезультатВыполнения, [СрокВыполнения] = @СрокВыпол" +
                "нения, [номерПП] = @номерПП, [ОписаниеКорреспондента] = @ОписаниеКорреспондента," +
                " [FlagPersonData] = @FlagPersonData, [FlagCardRepeet] = @FlagCardRepeet, [NameFi" +
                "leDocument] = @NameFileDocument, [GuidName] = @GuidName, [MD5] = @MD5, [CountDoc" +
                "] = @CountDoc, [idВидПоступленияДокумента] = @idВидПоступленияДокумента, [DataWr" +
                "iterServerDoc] = @DataWriterServerDoc, [NameFileDocumentVipNetEmailTitlePage] = " +
                "@NameFileDocumentVipNetEmailTitlePage, [FileDate] = @FileDate, [FileDateTitlePag" +
                "e] = @FileDateTitlePage, [FlagAuto] = @FlagAuto, [ДСП] = @ДСП WHERE (([id_карточ" +
                "ки] = @Original_id_карточки) AND ((@IsNull_id_документа = 1 AND [id_документа] I" +
                "S NULL) OR ([id_документа] = @Original_id_документа)) AND ((@IsNull_id_корреспон" +
                "дента = 1 AND [id_корреспондента] IS NULL) OR ([id_корреспондента] = @Original_i" +
                "d_корреспондента)) AND ([ВДело] = @Original_ВДело) AND ((@IsNull_ДатаИсхода = 1 " +
                "AND [ДатаИсхода] IS NULL) OR ([ДатаИсхода] = @Original_ДатаИсхода)) AND ((@IsNul" +
                "l_ДатаПоступ = 1 AND [ДатаПоступ] IS NULL) OR ([ДатаПоступ] = @Original_ДатаПост" +
                "уп)) AND ((@IsNull_КраткоеСодержание = 1 AND [КраткоеСодержание] IS NULL) OR ([К" +
                "раткоеСодержание] = @Original_КраткоеСодержание)) AND ([НаКонтроле] = @Original_" +
                "НаКонтроле) AND ((@IsNull_НомерВход = 1 AND [НомерВход] IS NULL) OR ([НомерВход]" +
                " = @Original_НомерВход)) AND ((@IsNull_НомерИсход = 1 AND [НомерИсход] IS NULL) " +
                "OR ([НомерИсход] = @Original_НомерИсход)) AND ((@IsNull_Резолюция = 1 AND [Резол" +
                "юция] IS NULL) OR ([Резолюция] = @Original_Резолюция)) AND ((@IsNull_РезультатВы" +
                "полнения = 1 AND [РезультатВыполнения] IS NULL) OR ([РезультатВыполнения] = @Ori" +
                "ginal_РезультатВыполнения)) AND ((@IsNull_СрокВыполнения = 1 AND [СрокВыполнения" +
                "] IS NULL) OR ([СрокВыполнения] = @Original_СрокВыполнения)) AND ((@IsNull_номер" +
                "ПП = 1 AND [номерПП] IS NULL) OR ([номерПП] = @Original_номерПП)) AND ((@IsNull_" +
                "ОписаниеКорреспондента = 1 AND [ОписаниеКорреспондента] IS NULL) OR ([ОписаниеКо" +
                "рреспондента] = @Original_ОписаниеКорреспондента)) AND ([FlagPersonData] = @Orig" +
                "inal_FlagPersonData) AND ([FlagCardRepeet] = @Original_FlagCardRepeet) AND ((@Is" +
                "Null_NameFileDocument = 1 AND [NameFileDocument] IS NULL) OR ([NameFileDocument]" +
                " = @Original_NameFileDocument)) AND ((@IsNull_GuidName = 1 AND [GuidName] IS NUL" +
                "L) OR ([GuidName] = @Original_GuidName)) AND ((@IsNull_MD5 = 1 AND [MD5] IS NULL" +
                ") OR ([MD5] = @Original_MD5)) AND ((@IsNull_CountDoc = 1 AND [CountDoc] IS NULL)" +
                " OR ([CountDoc] = @Original_CountDoc)) AND ((@IsNull_idВидПоступленияДокумента =" +
                " 1 AND [idВидПоступленияДокумента] IS NULL) OR ([idВидПоступленияДокумента] = @O" +
                "riginal_idВидПоступленияДокумента)) AND ((@IsNull_DataWriterServerDoc = 1 AND [D" +
                "ataWriterServerDoc] IS NULL) OR ([DataWriterServerDoc] = @Original_DataWriterSer" +
                "verDoc)) AND ((@IsNull_NameFileDocumentVipNetEmailTitlePage = 1 AND [NameFileDoc" +
                "umentVipNetEmailTitlePage] IS NULL) OR ([NameFileDocumentVipNetEmailTitlePage] =" +
                " @Original_NameFileDocumentVipNetEmailTitlePage)) AND ((@IsNull_FlagAuto = 1 AND" +
                " [FlagAuto] IS NULL) OR ([FlagAuto] = @Original_FlagAuto)) AND ((@IsNull_ДСП = 1" +
                " AND [ДСП] IS NULL) OR ([ДСП] = @Original_ДСП)));\r\nSELECT id_карточки, id_докуме" +
                "нта, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонт" +
                "роле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, ном" +
                "ерПП, ОписаниеКорреспондента, FlagPersonData, FlagCardRepeet, NameFileDocument, " +
                "GuidName, MD5, CountDoc, idВидПоступленияДокумента, DataWriterServerDoc, NameFil" +
                "eDocumentVipNetEmailTitlePage, FileDate, FileDateTitlePage, FlagAuto, ДСП FROM К" +
                "арточка WHERE (id_карточки = @id_карточки)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagPersonData", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPersonData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NameFileDocument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GuidName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MD5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DataWriterServerDoc", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileDate", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileDateTitlePage", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileDateTitlePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagAuto", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДСП", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_карточки", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_документа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_документа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id_корреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id_корреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ВДело", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ВДело", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаИсхода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаИсхода", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаИсхода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДатаПоступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПоступ", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПоступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_КраткоеСодержание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КраткоеСодержание", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КраткоеСодержание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НаКонтроле", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НаКонтроле", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерВход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерВход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерВход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерИсход", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерИсход", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерИсход", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Резолюция", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Резолюция", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Резолюция", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_РезультатВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РезультатВыполнения", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РезультатВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_СрокВыполнения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СрокВыполнения", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СрокВыполнения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_номерПП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "номерПП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ОписаниеКорреспондента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОписаниеКорреспондента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОписаниеКорреспондента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagPersonData", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPersonData", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagCardRepeet", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagCardRepeet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NameFileDocument", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NameFileDocument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocument", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GuidName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GuidName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GuidName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MD5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MD5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MD5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountDoc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_idВидПоступленияДокумента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "idВидПоступленияДокумента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DataWriterServerDoc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DataWriterServerDoc", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DataWriterServerDoc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NameFileDocumentVipNetEmailTitlePage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NameFileDocumentVipNetEmailTitlePage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FlagAuto", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagAuto", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagAuto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ДСП", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДСП", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДСП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id_карточки", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id_карточки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RegKor.Properties.Settings.Default.Документооборот09ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id_карточки, id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, ОписаниеКорреспондента, FlagPersonData, FlagCardRepeet, NameFileDocument, GuidName, MD5, CountDoc, idВидПоступленияДокумента, DataWriterServerDoc, NameFileDocumentVipNetEmailTitlePage, FileDate, FileDateTitlePage, FlagAuto, ДСП FROM dbo.Карточка";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS1.Карточка1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS1.Карточка1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS1.Карточка1DataTable dataTable = new DS1.Карточка1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1.Карточка1DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS1 dataSet) {
            return this.Adapter.Update(dataSet, "Карточка1");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_id_карточки, 
                    global::System.Nullable<int> Original_id_документа, 
                    global::System.Nullable<int> Original_id_корреспондента, 
                    bool Original_ВДело, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, 
                    string Original_КраткоеСодержание, 
                    bool Original_НаКонтроле, 
                    string Original_НомерВход, 
                    string Original_НомерИсход, 
                    string Original_Резолюция, 
                    string Original_РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, 
                    global::System.Nullable<int> Original_номерПП, 
                    string Original_ОписаниеКорреспондента, 
                    bool Original_FlagPersonData, 
                    bool Original_FlagCardRepeet, 
                    string Original_NameFileDocument, 
                    string Original_GuidName, 
                    string Original_MD5, 
                    global::System.Nullable<int> Original_CountDoc, 
                    global::System.Nullable<int> Original_idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> Original_DataWriterServerDoc, 
                    string Original_NameFileDocumentVipNetEmailTitlePage, 
                    global::System.Nullable<bool> Original_FlagAuto, 
                    global::System.Nullable<bool> Original_ДСП) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id_карточки));
            if ((Original_id_документа.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_id_документа.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_id_корреспондента.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_id_корреспондента.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_ВДело));
            if ((Original_ДатаИсхода.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_ДатаИсхода.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_ДатаПоступ.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_ДатаПоступ.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_КраткоеСодержание == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_КраткоеСодержание));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_НаКонтроле));
            if ((Original_НомерВход == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_НомерВход));
            }
            if ((Original_НомерИсход == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_НомерИсход));
            }
            if ((Original_Резолюция == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Резолюция));
            }
            if ((Original_РезультатВыполнения == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_РезультатВыполнения));
            }
            if ((Original_СрокВыполнения.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((System.DateTime)(Original_СрокВыполнения.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_номерПП.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_номерПП.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_ОписаниеКорреспондента == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_ОписаниеКорреспондента));
            }
            this.Adapter.DeleteCommand.Parameters[27].Value = ((bool)(Original_FlagPersonData));
            this.Adapter.DeleteCommand.Parameters[28].Value = ((bool)(Original_FlagCardRepeet));
            if ((Original_NameFileDocument == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_NameFileDocument));
            }
            if ((Original_GuidName == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_GuidName));
            }
            if ((Original_MD5 == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_MD5));
            }
            if ((Original_CountDoc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_CountDoc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_idВидПоступленияДокумента.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((int)(Original_idВидПоступленияДокумента.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_DataWriterServerDoc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((System.DateTime)(Original_DataWriterServerDoc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_NameFileDocumentVipNetEmailTitlePage == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_NameFileDocumentVipNetEmailTitlePage));
            }
            if ((Original_FlagAuto.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((bool)(Original_FlagAuto.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_ДСП.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((bool)(Original_ДСП.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> id_документа, 
                    global::System.Nullable<int> id_корреспондента, 
                    bool ВДело, 
                    global::System.Nullable<global::System.DateTime> ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> ДатаПоступ, 
                    string КраткоеСодержание, 
                    bool НаКонтроле, 
                    string НомерВход, 
                    string НомерИсход, 
                    string Резолюция, 
                    string РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> СрокВыполнения, 
                    global::System.Nullable<int> номерПП, 
                    string ОписаниеКорреспондента, 
                    bool FlagPersonData, 
                    bool FlagCardRepeet, 
                    string NameFileDocument, 
                    string GuidName, 
                    string MD5, 
                    global::System.Nullable<int> CountDoc, 
                    global::System.Nullable<int> idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> DataWriterServerDoc, 
                    string NameFileDocumentVipNetEmailTitlePage, 
                    byte[] FileDate, 
                    byte[] FileDateTitlePage, 
                    global::System.Nullable<bool> FlagAuto, 
                    global::System.Nullable<bool> ДСП) {
            if ((id_документа.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id_документа.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((id_корреспондента.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(id_корреспондента.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(ВДело));
            if ((ДатаИсхода.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(ДатаИсхода.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ДатаПоступ.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ДатаПоступ.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((КраткоеСодержание == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(КраткоеСодержание));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(НаКонтроле));
            if ((НомерВход == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(НомерВход));
            }
            if ((НомерИсход == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(НомерИсход));
            }
            if ((Резолюция == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Резолюция));
            }
            if ((РезультатВыполнения == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(РезультатВыполнения));
            }
            if ((СрокВыполнения.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(СрокВыполнения.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((номерПП.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(номерПП.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ОписаниеКорреспондента == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(ОписаниеКорреспондента));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(FlagPersonData));
            this.Adapter.InsertCommand.Parameters[15].Value = ((bool)(FlagCardRepeet));
            if ((NameFileDocument == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(NameFileDocument));
            }
            if ((GuidName == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(GuidName));
            }
            if ((MD5 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(MD5));
            }
            if ((CountDoc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(CountDoc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((idВидПоступленияДокумента.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(idВидПоступленияДокумента.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((DataWriterServerDoc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((System.DateTime)(DataWriterServerDoc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((NameFileDocumentVipNetEmailTitlePage == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(NameFileDocumentVipNetEmailTitlePage));
            }
            if ((FileDate == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((byte[])(FileDate));
            }
            if ((FileDateTitlePage == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((byte[])(FileDateTitlePage));
            }
            if ((FlagAuto.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((bool)(FlagAuto.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ДСП.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(ДСП.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> id_документа, 
                    global::System.Nullable<int> id_корреспондента, 
                    bool ВДело, 
                    global::System.Nullable<global::System.DateTime> ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> ДатаПоступ, 
                    string КраткоеСодержание, 
                    bool НаКонтроле, 
                    string НомерВход, 
                    string НомерИсход, 
                    string Резолюция, 
                    string РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> СрокВыполнения, 
                    global::System.Nullable<int> номерПП, 
                    string ОписаниеКорреспондента, 
                    bool FlagPersonData, 
                    bool FlagCardRepeet, 
                    string NameFileDocument, 
                    string GuidName, 
                    string MD5, 
                    global::System.Nullable<int> CountDoc, 
                    global::System.Nullable<int> idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> DataWriterServerDoc, 
                    string NameFileDocumentVipNetEmailTitlePage, 
                    byte[] FileDate, 
                    byte[] FileDateTitlePage, 
                    global::System.Nullable<bool> FlagAuto, 
                    global::System.Nullable<bool> ДСП, 
                    int Original_id_карточки, 
                    global::System.Nullable<int> Original_id_документа, 
                    global::System.Nullable<int> Original_id_корреспондента, 
                    bool Original_ВДело, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, 
                    string Original_КраткоеСодержание, 
                    bool Original_НаКонтроле, 
                    string Original_НомерВход, 
                    string Original_НомерИсход, 
                    string Original_Резолюция, 
                    string Original_РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, 
                    global::System.Nullable<int> Original_номерПП, 
                    string Original_ОписаниеКорреспондента, 
                    bool Original_FlagPersonData, 
                    bool Original_FlagCardRepeet, 
                    string Original_NameFileDocument, 
                    string Original_GuidName, 
                    string Original_MD5, 
                    global::System.Nullable<int> Original_CountDoc, 
                    global::System.Nullable<int> Original_idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> Original_DataWriterServerDoc, 
                    string Original_NameFileDocumentVipNetEmailTitlePage, 
                    global::System.Nullable<bool> Original_FlagAuto, 
                    global::System.Nullable<bool> Original_ДСП, 
                    int id_карточки) {
            if ((id_документа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id_документа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((id_корреспондента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(id_корреспондента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(ВДело));
            if ((ДатаИсхода.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(ДатаИсхода.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ДатаПоступ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ДатаПоступ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((КраткоеСодержание == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(КраткоеСодержание));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(НаКонтроле));
            if ((НомерВход == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(НомерВход));
            }
            if ((НомерИсход == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(НомерИсход));
            }
            if ((Резолюция == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Резолюция));
            }
            if ((РезультатВыполнения == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(РезультатВыполнения));
            }
            if ((СрокВыполнения.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(СрокВыполнения.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((номерПП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(номерПП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ОписаниеКорреспондента == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(ОписаниеКорреспондента));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(FlagPersonData));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(FlagCardRepeet));
            if ((NameFileDocument == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(NameFileDocument));
            }
            if ((GuidName == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(GuidName));
            }
            if ((MD5 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(MD5));
            }
            if ((CountDoc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(CountDoc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((idВидПоступленияДокумента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(idВидПоступленияДокумента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((DataWriterServerDoc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(DataWriterServerDoc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((NameFileDocumentVipNetEmailTitlePage == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(NameFileDocumentVipNetEmailTitlePage));
            }
            if ((FileDate == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((byte[])(FileDate));
            }
            if ((FileDateTitlePage == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((byte[])(FileDateTitlePage));
            }
            if ((FlagAuto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(FlagAuto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ДСП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(ДСП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_id_карточки));
            if ((Original_id_документа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_id_документа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_id_корреспондента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Original_id_корреспондента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_ВДело));
            if ((Original_ДатаИсхода.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((System.DateTime)(Original_ДатаИсхода.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_ДатаПоступ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(Original_ДатаПоступ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_КраткоеСодержание == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_КраткоеСодержание));
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_НаКонтроле));
            if ((Original_НомерВход == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_НомерВход));
            }
            if ((Original_НомерИсход == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_НомерИсход));
            }
            if ((Original_Резолюция == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_Резолюция));
            }
            if ((Original_РезультатВыполнения == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_РезультатВыполнения));
            }
            if ((Original_СрокВыполнения.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((System.DateTime)(Original_СрокВыполнения.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_номерПП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_номерПП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_ОписаниеКорреспондента == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_ОписаниеКорреспондента));
            }
            this.Adapter.UpdateCommand.Parameters[54].Value = ((bool)(Original_FlagPersonData));
            this.Adapter.UpdateCommand.Parameters[55].Value = ((bool)(Original_FlagCardRepeet));
            if ((Original_NameFileDocument == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_NameFileDocument));
            }
            if ((Original_GuidName == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_GuidName));
            }
            if ((Original_MD5 == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_MD5));
            }
            if ((Original_CountDoc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(Original_CountDoc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_idВидПоступленияДокумента.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((int)(Original_idВидПоступленияДокумента.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_DataWriterServerDoc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((System.DateTime)(Original_DataWriterServerDoc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_NameFileDocumentVipNetEmailTitlePage == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(Original_NameFileDocumentVipNetEmailTitlePage));
            }
            if ((Original_FlagAuto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((bool)(Original_FlagAuto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_ДСП.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((bool)(Original_ДСП.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[74].Value = ((int)(id_карточки));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> id_документа, 
                    global::System.Nullable<int> id_корреспондента, 
                    bool ВДело, 
                    global::System.Nullable<global::System.DateTime> ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> ДатаПоступ, 
                    string КраткоеСодержание, 
                    bool НаКонтроле, 
                    string НомерВход, 
                    string НомерИсход, 
                    string Резолюция, 
                    string РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> СрокВыполнения, 
                    global::System.Nullable<int> номерПП, 
                    string ОписаниеКорреспондента, 
                    bool FlagPersonData, 
                    bool FlagCardRepeet, 
                    string NameFileDocument, 
                    string GuidName, 
                    string MD5, 
                    global::System.Nullable<int> CountDoc, 
                    global::System.Nullable<int> idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> DataWriterServerDoc, 
                    string NameFileDocumentVipNetEmailTitlePage, 
                    byte[] FileDate, 
                    byte[] FileDateTitlePage, 
                    global::System.Nullable<bool> FlagAuto, 
                    global::System.Nullable<bool> ДСП, 
                    int Original_id_карточки, 
                    global::System.Nullable<int> Original_id_документа, 
                    global::System.Nullable<int> Original_id_корреспондента, 
                    bool Original_ВДело, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаИсхода, 
                    global::System.Nullable<global::System.DateTime> Original_ДатаПоступ, 
                    string Original_КраткоеСодержание, 
                    bool Original_НаКонтроле, 
                    string Original_НомерВход, 
                    string Original_НомерИсход, 
                    string Original_Резолюция, 
                    string Original_РезультатВыполнения, 
                    global::System.Nullable<global::System.DateTime> Original_СрокВыполнения, 
                    global::System.Nullable<int> Original_номерПП, 
                    string Original_ОписаниеКорреспондента, 
                    bool Original_FlagPersonData, 
                    bool Original_FlagCardRepeet, 
                    string Original_NameFileDocument, 
                    string Original_GuidName, 
                    string Original_MD5, 
                    global::System.Nullable<int> Original_CountDoc, 
                    global::System.Nullable<int> Original_idВидПоступленияДокумента, 
                    global::System.Nullable<global::System.DateTime> Original_DataWriterServerDoc, 
                    string Original_NameFileDocumentVipNetEmailTitlePage, 
                    global::System.Nullable<bool> Original_FlagAuto, 
                    global::System.Nullable<bool> Original_ДСП) {
            return this.Update(id_документа, id_корреспондента, ВДело, ДатаИсхода, ДатаПоступ, КраткоеСодержание, НаКонтроле, НомерВход, НомерИсход, Резолюция, РезультатВыполнения, СрокВыполнения, номерПП, ОписаниеКорреспондента, FlagPersonData, FlagCardRepeet, NameFileDocument, GuidName, MD5, CountDoc, idВидПоступленияДокумента, DataWriterServerDoc, NameFileDocumentVipNetEmailTitlePage, FileDate, FileDateTitlePage, FlagAuto, ДСП, Original_id_карточки, Original_id_документа, Original_id_корреспондента, Original_ВДело, Original_ДатаИсхода, Original_ДатаПоступ, Original_КраткоеСодержание, Original_НаКонтроле, Original_НомерВход, Original_НомерИсход, Original_Резолюция, Original_РезультатВыполнения, Original_СрокВыполнения, Original_номерПП, Original_ОписаниеКорреспондента, Original_FlagPersonData, Original_FlagCardRepeet, Original_NameFileDocument, Original_GuidName, Original_MD5, Original_CountDoc, Original_idВидПоступленияДокумента, Original_DataWriterServerDoc, Original_NameFileDocumentVipNetEmailTitlePage, Original_FlagAuto, Original_ДСП, Original_id_карточки);
        }
    }
}

#pragma warning restore 1591